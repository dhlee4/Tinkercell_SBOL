# Encoding: utf-8
__all__ = ["MapGenerator"]

from Tkinter import *
from tc_api import *
from window import Window
from mapdisplay import CodeDisplayPrompt
from mapupload import MapUploader
import os
from datetime import datetime

MAPGENERATOR_ACTIVE   = False
MAPGENERATOR_GEOMETRY = "+90+70"
IMAGEMAP_NAME         = "Wikidust_%s" % datetime.now().strftime("%Y-%m-%d_%H%M")
IMAGEMAP_SIZE         = (0.0, 0.0) # set the first time MapGenerator runs
IMAGEMAP_DESTINATION  = "upload"  #can also be "display"
IMAGEMAP_CODETYPE     = "wiki"     #can also be "html"
WIKI_MAP_FRAME = "<center>Imagemap generated by WikiDust. Click on a part to see more information about it.</center>"

class MapGenerator(Window):
    """ creates and uploads imagemaps
    """
    class ImageControls(Window.ControlPanel):
        class NameControls(Window.ControlPanel):
            def __init__(self, parent, name):
                question = "What should the imagemap be called?"
                tip = "This will be used in the imagemap code, "\
                      "and as the name of the wiki page created for the image. "\
                      "It should be unique to avoid conflicts with existing pages."
                self.name = name
                Window.ControlPanel.__init__(self, parent, question, tip)
                Entry(self, highlightbackground=self.cget("bg"),
                      textvariable=self.name).pack(fill=X, padx=5, expand=True)

        class SizeControls(Window.ControlPanel):
            def __init__(self, parent, size):
                Window.ControlPanel.__init__(self, parent)
                Label(self, text="Width", bg=self.cget("bg")).grid(row=0, column=0)
                Label(self, text="Height", bg=self.cget("bg")).grid(row=1, column=0)
                self.size = size
                self.size[0].set(tc_screenWidth())
                self.size[1].set(tc_screenHeight())
                widthField = Entry(self, textvariable=self.size[0],
                                   highlightbackground=self.cget("bg"),
                                   width=10)
                widthField.bind("<KeyRelease>", self.update)
                widthField.grid(row=0, column=1)
                heightField = Entry(self, textvariable=self.size[1],
                                    highlightbackground=self.cget("bg"),
                                    width=10)
                heightField.bind("<KeyRelease>", self.update)
                heightField.grid(row=1, column=1)

            def update(self, event):
                """ when one of the map dimensions changes,
                    this adjusts the other to match
                """
                #TODO fix changes when tabbing back and forth
                aspectRatio = float(tc_screenWidth()) / float(tc_screenHeight())
                name = event.widget.cget("textvariable")
                try:
                    if name == str(self.size[0]): # width
                        currentWidth = float( self.size[0].get() )
                        newHeight = int( currentWidth * (1.0/aspectRatio) )
                        self.size[1].set(newHeight)
                    elif name == str(self.size[1]): # height
                        currentHeight = float( self.size[1].get() )
                        newWidth = int(currentHeight * aspectRatio)
                        self.size[0].set(newWidth)
                except ValueError: # probably an empty field or decimal value
                    return

        def __init__(self, parent, name, size):
            Window.ControlPanel.__init__(self, parent)
            self.name = name
            self.size = size
            if 0.0 in self.size: #first instantiation
                self.size[0].set( tc_screenWidth()  )
                self.size[1].set( tc_screenHeight() )
            self.NameControls(self, self.name).pack(fill=X, expand=True)
            sizeArea = Window.ControlPanel(self, bg=self.cget("bg"))
            Label(sizeArea, text="How big should it be?", bg=self.cget("bg")).pack(anchor=W, padx=5)
            self.SizeControls(sizeArea, self.size).pack(side=LEFT)
            Button(sizeArea, text="Preview",
                   highlightbackground=self.cget("bg"),
                   command=self.preview).pack(side=LEFT, padx=3)
            sizeArea.pack(fill=X, expand=True)
            self.update_idletasks()

        def preview(self):
            width  = int( self.size[0].get() )
            height = int( self.size[1].get() )
            name = self.name.get()
            screenshotPath = "%s.png" % os.path.splitext(name)[0]
            tc_screenshot(screenshotPath, width, height)
            tc_openUrl(screenshotPath) # opens with default program
            #TODO specify based on platform

    class CodeControls(Window.ControlPanel):
        class DestinationControls(Window.ControlPanel):
            def __init__(self, parent, destination):
                question = "What should be done with it?"
                tip = "WikiDust can automatically export your imagemap to a MediaWiki page. "\
                      "Or, you can paste it into the site yourself "\
                      "for more control over the final code."
                self.destination = destination
                Window.ControlPanel.__init__(self, parent, question, tip)
                self.uploadRadio  = Radiobutton(self,
                                                text="Upload to a wiki page.",
                                                variable=self.destination,
                                                value="upload",
                                                bg=self.cget("bg"))
                self.displayRadio = Radiobutton(self,
                                                text="Just display the code.",
                                                variable=self.destination,
                                                value="display",
                                                bg=self.cget("bg"))
                self.uploadRadio.pack(anchor=W)
                self.displayRadio.pack(anchor=W)

        class CodeTypeControls(Window.ControlPanel):
            def __init__(self, parent, codeType):
                question = "Which type of code should be used?"
                tip = "Most wikis expect Wiki Markup, if they do imagemaps at all. "\
                      "However, HTML should be used instead on the iGEM wiki, "\
                      "Parts Registry, or OpenWetWare, and on non-wiki websites."
                self.codeType = codeType
                Window.ControlPanel.__init__(self, parent, question, tip)
                self.wikiRadio = Radiobutton(self, text="Wiki Markup", value="wiki",
                                             variable=self.codeType, bg=self.cget("bg"))
                self.htmlRadio = Radiobutton(self, text="HTML", value="html",
                                             variable=self.codeType, bg=self.cget("bg"))
                self.wikiRadio.pack(anchor=W)
                self.htmlRadio.pack(anchor=W)

        def __init__(self, parent, destination, codeType):
            Window.ControlPanel.__init__(self, parent)
            self.destination = destination
            self.codeType    = codeType
            self.destinationChooser = self.DestinationControls(self, self.destination)
            self.codeTypeChooser    = self.CodeTypeControls(self, self.codeType)
            self.destinationChooser.pack(fill=X, expand=True)
            self.codeTypeChooser.pack(fill=X, expand=True)
            self.update_idletasks()

    class MapButtons(Window.ButtonPanel):
        def __init__(self, parent):
            names = ("  Close  ", "  Generate  ")
            Window.ButtonPanel.__init__(self, parent, names)
            self.closeButton = self.buttons[0]
            self.generateButton = self.buttons[1]

    def __init__(self):
        global MAPGENERATOR_ACTIVE
        if MAPGENERATOR_ACTIVE:
            raise Exception("Can't run more than one MapGenerator instance at a time")
        else: #this is the only instance
            MAPGENERATOR_ACTIVE = True
            try:
                Window.__init__(self)
                #create Tkinter Variables
                self.name        = StringVar(self, value=IMAGEMAP_NAME)
                self.size        = (DoubleVar(self, value=IMAGEMAP_SIZE[0]),
                                    DoubleVar(self, value=IMAGEMAP_SIZE[1]))
                self.destination = StringVar(self, value=IMAGEMAP_DESTINATION)
                self.codeType    = StringVar(self, value=IMAGEMAP_CODETYPE)
                #create controls
                imageControls = self.ImageControls(self, self.name, self.size)
                codeControls = self.CodeControls(self, self.destination, self.codeType)
                buttons = self.MapButtons(self)
                buttons.closeButton.config(command=self.destroy)
                buttons.generateButton.config(command=self.generate)
                imageControls.pack(pady=2, side=TOP)
                codeControls.pack(pady=2, side=TOP)
                buttons.pack(side=BOTTOM, padx=2, pady=2)
                #tweak window
                self.title("Create Map")
                self.geometry(MAPGENERATOR_GEOMETRY)
                self.resizable(False, False)
                # display everything
                self.update_idletasks()
                self.focus_force()
                self.mainloop()
            except:
                raise
            finally:
                MAPGENERATOR_ACTIVE = False

    def destroy(self, event=None):
        global MAPGENERATOR_GEOMETRY
        global IMAGEMAP_NAME
        global IMAGEMAP_SIZE
        global IMAGEMAP_DESTINATION
        global IMAGEMAP_CODETYPE
        MAPGENERATOR_GEOMETRY = self.geometry()
        IMAGEMAP_NAME         = self.name.get()
        IMAGEMAP_SIZE         = ( self.size[0].get(),
                                  self.size[1].get() )
        IMAGEMAP_DESTINATION  = self.destination.get()
        IMAGEMAP_CODETYPE     = self.codeType.get()
        Window.destroy(self)

    def generate(self):
        # save a screenshot
        width  = int( self.size[0].get() )
        height = int( self.size[1].get() )
        name = str( self.name.get() )
        path = "%s/%s.png" % (tc_homeDir(), name)
        # generate imagemap code
        tc_screenshot(path, width, height)
        language = str( self.codeType.get() )
        compression = float(width) / float( tc_screenWidth() )
        code = self.imagemapCode(path, width, height, compression, language)
        destination = str( self.destination.get() )
        self.update_idletasks()
        if destination == "upload":
            MapUploader(path, code)
        elif destination == "display":
            CodeDisplayPrompt(path, code)

    #TODO custom exception
    def getURI(self, item):
        annotation = fromTC( tc_getTextData(item,"annotation") )
        rownames = annotation[0]
        annotation = annotation[2][0] #first column
        try:
            uri = annotation.pop( rownames.index("uri") )
        except ValueError:
            raise Exception("%s has no uri" % tc_getName(item))
        if uri == "":
            raise Exception("%s has no uri" % tc_getName(item))
        return uri
 
    def imagemapCode(self, path, width, height, compression, language):
        name = os.path.basename(path)
        # start code
        if language == "wiki":
            code = "<imagemap>\nImage:%s|%spx|center|thumb|%s" % (name, width, WIKI_MAP_FRAME)
        else: # language == "html"
            code =  '<html>'
            code += '\n<img src="PASTE URL OF IMAGE HERE" width="%s" height="%s" usemap="#%s"/>' \
                    % (width, height, name)
            code += '\n<map name="%s">' % name
        # add a line for each part
        items = fromTC( tc_allItems() )
        for item in items:
            annotation = fromTC( tc_getTextData(item,"annotation") )
            try:
                uri = self.getURI(item)
            except:
                continue # items aren't necessarily parts
            title = ''.join( uri.rpartition("Part:")[1:] ) #TODO handle non-registry parts here?
            # calculate positions
            width   = tc_getWidth(item)
            height  = tc_getHeight(item)
            centerX = tc_getX(item) - tc_screenX()
            centerY = tc_getY(item) - tc_screenY()
            x1 = max( int((centerX - (width/2)) * compression), 0 )
            y1 = max( int((centerY - (width/2)) * compression), 0 )
            x2 = max( int((centerX + (width/2)) * compression), 0 )
            y2 = max( int((centerY + (width/2)) * compression), 0 )
            # add code
            if language == "wiki":
                code += "\nrect %s %s %s %s [%s %s]" % (x1, y1, x2, y2, uri, title)
            else:
                code += '\n<area shape="rect" coords="%d,%d,%d,%d" title="%s" href="%s"/> ' \
                        % (x1, y1, x2, y2, title, uri)
        # finish code
        if language == "wiki":
            code += "\n</imagemap>"
        else:
            code += '\n</map>\n</html>\n'
        return code

