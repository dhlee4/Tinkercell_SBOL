#TODO send own windows backward to bring tinkercell ones to front?

from window import *
from meter import Meter
import webbrowser
import wikibrowser
import os
from errorreport import ReportSender
try:
    from tc_api import tc_askQuestion
    askQuestion = tc_askQuestion
except ImportError: # running outside TinkerCell
    def askQuestion(question):
        answer = raw_input(question)
        return answer.lower().startswith("y")

MAPUPLOADER_GEOMETRY = "+160+125"
DEFAULT_URL = "http://wikidust.sbols.org/index.php/Sandbox:Imagemaps"
DEFAULT_USER = ''
WATERMARK = "Imagemap generated by WikiDust."\
            "\nFor more information, see http://www.tinkercell.com/plugins/wikidust"

class MapUploader(Window):
    class UploadSettings(Window.ControlPanel):
        def __init__(self, parent, page, username, password):
            Window.ControlPanel.__init__(self, parent)
            labelArea = Frame(self)
            Label(labelArea, text="Page to edit", anchor=W).pack(fill=X, expand=True)
            Label(labelArea, text="Username",     anchor=W).pack(fill=X, expand=True)
            Label(labelArea, text="Password",     anchor=W).pack(fill=X, expand=True)
            labelArea.pack(side=LEFT)
            fieldArea = Frame(self)
            self.pageField = Entry(fieldArea, textvariable=page)
            self.usernameField = Entry(fieldArea, textvariable=username)
            self.passwordField = Entry(fieldArea, show="*", textvariable=password)
            self.pageField.pack(fill=X, expand=True)
            self.usernameField.pack(fill=X, expand=True)
            self.passwordField.pack(fill=X, expand=True)
            fieldArea.pack(side=LEFT, fill=X, expand=True)

        def disable(self):
            for field in (self.pageField, self.usernameField, self.passwordField):
                field.config(state=DISABLED)

        def enable(self):
            for field in (self.pageField, self.usernameField, self.passwordField):
                field.config(state=NORMAL)

    class UploadProgress(Window.ControlPanel):
        def __init__(self, parent):
            Window.ControlPanel.__init__(self, parent)
            self.progressBar = Meter(self, bg=parent.cget("bg"), relief=SUNKEN, bd=2)
            self.progressBar.pack(padx=10, pady=5, fill=X, expand=True)

    class UploadButtons(Window.ButtonPanel):
        def __init__(self, parent):
            self.parent = parent
            buttons = ("Cancel", "Upload Imagemap")
            Window.ButtonPanel.__init__(self, parent, buttons)
            self.closeButton = self.buttons[0]
            self.okButton = self.buttons[1]
            self.closeButton.config(padx=5)
            self.okButton.config(padx=5)

    def __init__(self, path=None, code=None):
        tip = "A seperate file page will be created for your image, "\
              "and code referencing it will be added here. "
        Window.__init__(self, tooltip=tip)
        self.lastSuppressed = None # for unit testing
        self.browser = wikibrowser.Browser()
        self.screenshotPath = path
        self.mapCode = code
        self.userSuppliedURL = StringVar(value=DEFAULT_URL)
        self.username = StringVar(value=DEFAULT_USER)
        self.password = StringVar()
        self.settings = self.UploadSettings(self, self.userSuppliedURL,
                                            self.username, self.password)
        self.settings.pack(padx=5, pady=5, fill=X, expand=True)
        panel = self.UploadProgress(self)
        self.progressBar = panel.progressBar
        panel.pack(fill=X, expand=True)
        self.uploadButtons = self.UploadButtons(self)
        self.closeButton = self.uploadButtons.closeButton
        self.okButton = self.uploadButtons.okButton
        self.uploadButtons.pack()
        self.title("Export Map")
        self.progressBar.set(0.0)
        self.geometry(MAPUPLOADER_GEOMETRY)
        self.resizable(False, False)
        self.focus_force()
        self.setState("ready")

    def setState(self, state):
        if state == "ready":
            self.closeButton.config(text="Close", command=self.destroy, state=NORMAL)
            self.okButton.config(text="Upload Imagemap", command=self.upload, state=NORMAL)
            self.settings.enable()
            #self.progressBar.set(0.0)
        elif state == "uploading":
            self.closeButton.config(text="Close", command=self.destroy, state=NORMAL)
            self.okButton.config(text="Upload Imagemap", state=DISABLED)
            self.settings.disable()
        else: # == "done"
            self.closeButton.config(text="OK", command=self.destroy, state=NORMAL)
            self.okButton.config(text="Go to page", command=self.openInBrowser, state=NORMAL)
            self.settings.enable()

    def openInBrowser(self):
        url = self.userSuppliedURL.get()
        webbrowser.open(url)
        self.destroy()

    def upload(self):
        url = self.userSuppliedURL.get()
        username = self.username.get()
        password = self.password.get()
        path = self.screenshotPath
        name = os.path.basename(path)
        code = self.mapCode
        usingLogin = '' in (username, password)
        try:
            self.setState("uploading")
            if usingLogin:
                self.progressBar.set(0.3, "Connecting to wiki")
            else:
                self.progressBar.set(0.3, "Logging in to wiki")
            self.update_idletasks()
            self.browser.loadWiki(url, username, password)
            self.progressBar.set(0.5, "Uploading image")
            self.update_idletasks()
            try:
                self.browser.uploadFile(path, WATERMARK)
            except wikibrowser.FileExistsError:
                if askQuestion("%s already exists on the wiki.\nReplace it?" % name):
                    self.browser.uploadFile(path, WATERMARK, replace=True)
                else:
                    raise
            imageURL = self.browser.getImageURL(name)
            if imageURL != None:
                code = code.replace("PASTE URL OF IMAGE HERE", imageURL)
            else:
                print "Warning: failed to get image url. you'll have to put it in yourself"
            self.progressBar.set(0.8, "Uploading code")
            self.update_idletasks()
            self.browser.addWikitext(code, url)
            if usingLogin:
                self.progressBar.set(0.9, "Logging out")
                self.update_idletasks()
                self.browser.logout()
            self.progressBar.set(1.0, "Imagemap uploaded")
            self.setState("done")
            self.update_idletasks()
        except Exception, e:
            self.lastSuppressed = e
            self.setState("ready")
            expectedErrors = {wikibrowser.FileExistsError: "image already exists on the wiki",
                              wikibrowser.PageLockedError: "you aren't allowed to edit this page",
                              wikibrowser.BadURLError:     "invalid URL",
                              wikibrowser.BadLoginError:   "username or password rejected"}
            try:
                message = expectedErrors[ type(e) ]
                self.progressBar.set(1.0, "Error: %s" % message)
            except KeyError: # unecpected error
                if type(e) == wikibrowser.SiteLayoutError:
                    message = "unexpected page layout"
                    question = "WikiDust encountered an unexpected webpage layout."\
                               "\nNotify the developer so support for sites like this can be added?"
                else:
                    print e
                    message = type(e)
                    question = "WikiDust encountered an error."\
                               "\nNotify the developer so the problem can be fixed?"
                self.progressBar.set(1.0, "Error: %s" % message)
                if askQuestion(question):
                    ReportSender()
                self.focus_force()

    def destroy(self, event=None):
        global MAPUPLOADER_GEOMETRY
        global DEFAULT_URL
        global DEFAULT_USER
        MAPUPLOADER_GEOMETRY = self.geometry()
        DEFAULT_URL = self.userSuppliedURL.get()
        DEFAULT_USER = self.username.get()
        Window.destroy(self)

