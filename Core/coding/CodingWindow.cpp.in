<<<<<<< HEAD
/****************************************************************************
 Copyright (c) 2008 Deepak Chandran
 Contact: Deepak Chandran (dchandran1@gmail.com)
 see COPYRIGHT.TXT

 Provides a text window where C code can be written and run dynamically

****************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <QFile>
#include <QMessageBox>
#include <QProcess>
#include "GraphicsScene.h"
#include "MainWindow.h"
#include "NodeGraphicsItem.h"
#include "ConnectionGraphicsItem.h"
#include "TextGraphicsItem.h"
#include "ConsoleWindow.h"
#include "coding/CodingWindow.h"
#include "coding/PythonTool.h"
#include "coding/OctaveTool.h"
#include "coding/RubyTool.h"
#include "coding/LoadCLibraries.h"
#include "GlobalSettings.h"
#include <QRegExp>
#include <QVBoxLayout>
#include <QDockWidget>
#include <QProcess>
#include <QLibrary>
#include <QDir>
#include <QtDebug>
#include <QDesktopServices>

namespace Tinkercell
{
	 /********************************
	      Coding window
	 *********************************/

	CodingWindow::CodingWindow()
		 : Tool(tr("Coding Window"),tr("Coding"))
	{
	 	 selectedLanguage = None;
		
		 QString appDir = QCoreApplication::applicationDirPath();
		 QString homeDir = GlobalSettings::homeDir();
		 QString tempDir = GlobalSettings::tempDir();
		 fileName = tempDir + tr("/code.c");
		 
		 toolBar = 0;
		 window = new QMainWindow;

		 setupEditor();
		 setupMenu();
		 
 		 QSettings * settings = MainWindow::getSettings();
 		 
		 settings->beginGroup("Subversion");
	 	 if (QDir(homeDir).exists())
			GlobalSettings::DO_SVN_UPDATE = settings->value(tr("auto-update"),false).toBool();
		else
			GlobalSettings::DO_SVN_UPDATE = settings->value(tr("auto-update"),true).toBool();	
		 settings->endGroup();
		 
		 delete settings;

	#ifdef Q_WS_WIN

		tempDir.replace(QObject::tr("/"),QObject::tr("\\"));
		appDir.replace(QObject::tr("/"),QObject::tr("\\"));
		homeDir.replace(QObject::tr("/"),QObject::tr("\\"));
		homeDir = QObject::tr("\"") + homeDir + QObject::tr("\"");

		QString s1(QObject::tr("copy \"") + appDir + QObject::tr("\"\\win32\\*.* \"") + tempDir + QObject::tr("\" /Y"));
		//if (system(s1.toAscii().data()) < 0)
			//QMessageBox::information(Tinkercell::MainWindow::instance(), "Error", "Unable to copy some needed GCC files to temporary folder");

	#endif
		
		if (GlobalSettings::DO_SVN_UPDATE)
		{
			doSVNUpdate();
		}
		
		usernameDialog = 0;
		usernameLine = 0;
		passwordLine = 0;

		QHBoxLayout * layout = new QHBoxLayout;
		layout->addWidget(window);
		layout->setContentsMargins(0,0,0,0);
		setLayout(layout);
		setWindowFlags(Qt::Window);
	}
	
	void CodingWindow::convertCodeToButton()
	{
		if (selectedLanguage == Python)
			convertCodeToButtonPy();
		else
		if (selectedLanguage == Ruby)
			convertCodeToButtonRuby();
		else
		if (selectedLanguage == Octave)
			convertCodeToButtonOctave();
		else
		if (selectedLanguage == C)
			convertCodeToButtonC();
	}

	void CodingWindow::convertCodeToButtonC()
	{
		QString code = editor->toPlainText();
		if (!code.contains("tc_addFunction"))
		{
			code += 
			tr("\n\nTCAPIEXPORT void tc_main()\n{\n\
    /*the last three arguments are: specific family (string), show in menu (1 or 0), context menu (1 or 0), set as default function (1 or 0)*/ \n\n\
    tc_addFunction(&run, \n\
\"Function name\", \n\
\"Short description\", \n\
\"Category\", \n\
\"plugins/c/function.png\", \n\
\"\", 1, 0, 0); \n}\n\n");
			editor->setPlainText(code);
			QMessageBox::information(this,tr("Program description missing"),tr("tc_main and tc_addFunction are required for adding a new C function to the programs menu. Take a look at the code."));
			return;
		}
		
		QString tempDir = GlobalSettings::tempDir();
		QString homeDir = GlobalSettings::homeDir();
		
		QString filename = tempDir + tr("/code.c");
		QFile qfile(filename);
		if (!qfile.open(QIODevice::WriteOnly | QIODevice::Text))
		{
			QMessageBox::about(this, tr("Error"),
					 tr("Cannot write file: ") + tempDir + tr("/code.c"));
			return;
		}
		
		QString dllName = QInputDialog::getText(this,tr("Program name"),tr("Name your program (one words):"));
		dllName.replace(QRegExp("[^A-Za-z0-9]"),tr("_"));

		QTextStream out(&qfile);
		out << code;
		qfile.close();

		QDir pluginsDir(homeDir + tr("/") +  tr("@TINKERCELL_C_PLUGINS_FOLDER@"));

		if (!pluginsDir.exists()) return;
		
		dllName = homeDir + tr("/") +  tr("@TINKERCELL_C_PLUGINS_FOLDER@") + tr("/") + dllName;
		emit compile(tr("code.c"),dllName);
		
		QPair<QString,QString> login = requestLoginInfo();
		QString username = login.first;
		QString password = login.second;

		if (!username.isEmpty() && !password.isEmpty())
		{
		#ifdef Q_WS_WIN
			homeDir.replace(tr("/"),tr("\\"));
			homeDir = tr("\"") + homeDir + tr("\"");
			QString s = QObject::tr("cd ") + homeDir + QObject::tr("& svn add ") + dllName + QObject::tr("& svn commit -m\"new code added\" --username ") + username + QObject::tr(" --password ") + password + QObject::tr(" --no-auth-cache --non-interactive");
		#else
			QString s = QObject::tr("cd ") + homeDir + QObject::tr("; svn add ") + dllName + QObject::tr("; svn commit -m\"new code added\" --username ") + username + QObject::tr(" --password ") + password + QObject::tr(" --no-auth-cache --non-interactive");
		#endif
			system(s.toAscii().data());
		}
		
		QMessageBox::information(this,tr("Saved"),tr("The program ") + dllName + tr(" has been saved and uploaded"));		
		
		mainWindow->loadDynamicLibrary(dllName);
	}
	
	QPair<QString,QString> CodingWindow::requestLoginInfo()
	{
		if (!MainWindow::instance())
			return QPair<QString,QString>("","");
			
		QSettings * settings = MainWindow::getSettings();
		settings->beginGroup("Subversion");
		QString username = settings->value(tr("svn-username")).toString();
		QString password = settings->value(tr("svn-password")).toString();
		
		Tool * tool = MainWindow::instance()->tool(QObject::tr("Coding Window"));
		if (tool)
		{
			CodingWindow * codingWindow = static_cast<CodingWindow*>(tool);
			codingWindow->usernameLine->setText(username);
			codingWindow->passwordLine->setText(password);
			codingWindow->usernameDialog->exec();
			username = codingWindow->usernameLine->text();
			password = codingWindow->passwordLine->text();
		}
		
		settings->setValue(tr("svn-username"),username);
		settings->setValue(tr("svn-password"),password);
		settings->endGroup();
		
		return QPair<QString,QString>( username, password);
	}

	void CodingWindow::convertCodeToButtonPy()
	{
		if (!editor || !usernameDialog || !usernameLine || !passwordLine) return;
		
		QString text = editor->toPlainText();
		if (!text.startsWith("\"\"\""))
		{
			text = tr("\"\"\"\n\
category: Miscellaneous\n\
name: name of program\n\
description: what does this program do?\n\
icon: plugins/c/function.png\n\
menu: yes\n\
tool: yes\n\
specific for:\n\"\"\"\n\n") + text;
			editor->setPlainText(text);
			QMessageBox::information(this,tr("Program description missing"),tr("Please enter the program description in comments"));
			return;
		}		
		
		QString homeDir = GlobalSettings::homeDir();
		QDir userHomeDir(homeDir);
		
		if (!userHomeDir.cd(tr("python")))
		{
			userHomeDir.mkdir(tr("python"));
			if (!userHomeDir.cd(tr("python")))
			{
				QMessageBox::information(this,tr("Error"),tr("TinkerCell is not able to write to ") + userHomeDir.absolutePath());
				return;
			}
		}
		
		QString filename = QFileDialog::getSaveFileName(this,tr("Save your program"),userHomeDir.absolutePath(),tr("*.py"));
		
		QFile pyfile(filename);
		
		if (!pyfile.open(QIODevice::WriteOnly | QIODevice::Text))
			return;
		else
		{
			QTextStream outpy(&pyfile);
			outpy << (editor->toPlainText());
			pyfile.close();
			
			QPair<QString,QString> login = requestLoginInfo();
			QString username = login.first;
			QString password = login.second;

			if (!username.isEmpty() && !password.isEmpty())
			{
			#ifdef Q_WS_WIN
				homeDir.replace(tr("/"),tr("\\"));
				homeDir = tr("\"") + homeDir + tr("\"");
				QString s = QObject::tr("cd ") + userHomeDir.absolutePath() + QObject::tr("& svn add ") + filename + QObject::tr("& svn commit -m\"new code added\" --username ") + username + QObject::tr(" --password ") + password + QObject::tr(" --no-auth-cache --non-interactive");
			#else
				QString s = QObject::tr("cd ") + userHomeDir.absolutePath() + QObject::tr("; svn add ") + filename + QObject::tr("; svn commit -m\"new code added\" --username ") + username + QObject::tr(" --password ") + password + QObject::tr(" --no-auth-cache --non-interactive");
			#endif
				system(s.toAscii().data());
			}

			QMessageBox::information(mainWindow, "Saved", tr("Saved and uploaded ") + filename);
		}
		
		emit loadPyFromDir(userHomeDir.absolutePath());
	}

	void CodingWindow::convertCodeToButtonRuby()
	{
		if (!editor || !usernameDialog || !usernameLine || !passwordLine) return;
		
		QString text = editor->toPlainText();
		if (!text.startsWith("\"\"\""))
		{
			text = tr("\"\"\"\n\
category: Miscellaneous\n\
name: name of program\n\
description: what does this program do?\n\
icon: plugins/c/function.png\n\
menu: yes\n\
tool: yes\n\
specific for:\n\"\"\"\n\n") + text;
			editor->setPlainText(text);
			QMessageBox::information(this,tr("Program description missing"),tr("Please enter the program description in comments"));
			return;
		}		
		
		QString homeDir = GlobalSettings::homeDir();
		QDir userHomeDir(homeDir);
		
		if (!userHomeDir.cd(tr("ruby")))
		{
			userHomeDir.mkdir(tr("ruby"));
			if (!userHomeDir.cd(tr("ruby")))
			{
				QMessageBox::information(this,tr("Error"),tr("TinkerCell is not able to write to ") + userHomeDir.absolutePath());
				return;
			}
		}
		
		QString filename = QFileDialog::getSaveFileName(this,tr("Save your program"),userHomeDir.absolutePath(),tr("*.rb"));
		
		QFile rubyfile(filename);
		
		if (!rubyfile.open(QIODevice::WriteOnly | QIODevice::Text))
			return;
		else
		{
			QTextStream outruby(&rubyfile);
			outruby << (editor->toPlainText());
			rubyfile.close();
			
			QPair<QString,QString> login = requestLoginInfo();
			QString username = login.first;
			QString password = login.second;

			if (!username.isEmpty() && !password.isEmpty())
			{
			#ifdef Q_WS_WIN
				homeDir.replace(tr("/"),tr("\\"));
				homeDir = tr("\"") + homeDir + tr("\"");
				QString s = QObject::tr("cd ") + userHomeDir.absolutePath() + QObject::tr("& svn add ") + filename + QObject::tr("& svn commit -m\"new code added\" --username ") + username + QObject::tr(" --password ") + password + QObject::tr(" --no-auth-cache --non-interactive");
			#else
				QString s = QObject::tr("cd ") + userHomeDir.absolutePath() + QObject::tr("; svn add ") + filename + QObject::tr("; svn commit -m\"new code added\" --username ") + username + QObject::tr(" --password ") + password + QObject::tr(" --no-auth-cache --non-interactive");
			#endif
				system(s.toAscii().data());
			}
			QMessageBox::information(mainWindow, "Saved", tr("Saved and uploaded ") + filename);
		}
		
		emit loadRubyFromDir(userHomeDir.absolutePath());
	}
	
	void CodingWindow::convertCodeToButtonOctave()
	{
		if (!editor || !usernameDialog || !usernameLine || !passwordLine) return;
		
		QString text = editor->toPlainText();
		if (!text.contains("#category") || !text.contains("#name"))
		{
			text = tr("\
#category: Miscellaneous\n\
#name: My function\n\
#description: This program does something\n\
#icon: plugins/c/function.png\n\
#menu: yes\n\
#tool: yes\n\
#specific for:\n\n") + text;
			editor->setPlainText(text);
			QMessageBox::information(this,tr("Program description missing"),tr("Please enter the program description in comments"));
			return;
		}
		
		QString homeDir = GlobalSettings::homeDir();
		QDir userHomeDir(homeDir);
		
		if (!userHomeDir.cd(tr("octave")))
		{
			userHomeDir.mkdir(tr("octave"));
			if (!userHomeDir.cd(tr("octave")))
			{
				QMessageBox::information(this,tr("Error"),tr("Unable to write to ") + userHomeDir.absolutePath());
				return;
			}
		}
		
		QString filename = QFileDialog::getSaveFileName(this,tr("Save your program"),userHomeDir.absolutePath(),tr("*.py"));
		
		QFile octfile(filename);
		
		if (!octfile.open(QIODevice::WriteOnly | QIODevice::Text))
			return;
		else
		{	
			QTextStream outoct(&octfile);
			outoct << (editor->toPlainText());
			octfile.close();
			
			QPair<QString,QString> login = requestLoginInfo();
			QString username = login.first;
			QString password = login.second;

			if (!username.isEmpty() && !password.isEmpty())
			{
			#ifdef Q_WS_WIN
				homeDir.replace(tr("/"),tr("\\"));
				homeDir = tr("\"") + homeDir + tr("\"");
				QString s = QObject::tr("cd ") + userHomeDir.absolutePath() + QObject::tr("& svn add ") + filename + QObject::tr("& svn commit -m\"new code added\" --username ") + username + QObject::tr(" --password ") + password + QObject::tr(" --no-auth-cache --non-interactive");
			#else
				QString s = QObject::tr("cd ") + userHomeDir.absolutePath() + QObject::tr("; svn add ") + filename + QObject::tr("; svn commit -m\"new code added\" --username ") + username + QObject::tr(" --password ") + password + QObject::tr(" --no-auth-cache --non-interactive");
			#endif
				system(s.toAscii().data());
			}
			QMessageBox::information(mainWindow, "Saved", tr("Saved and uploaded ") + filename);
		}
		
		emit loadOctFromDir(userHomeDir.absolutePath());
	}
	
	void CodingWindow::enableC(bool b)
	{
	    if (!b || selectedLanguage == C) return;
	    
	    selectedLanguage = C;
		TCFunctionsListView::prefix = tr("");
	    
	    if (cButton)
	        cButton->setChecked(true);
	    
	    if (cAction)
	        cAction->setChecked(true);
	    
	    if (editor)
	 		editor->setPlainText(tr("#include \"TC_api.h\"\nTCAPIEXPORT void run()\n{\n\n\n\n   return; \n}\n"));
	}
	
	void CodingWindow::enableOctave(bool b)
	{  
	    if (!b || selectedLanguage == Octave) return;
	    
	    QWidget * widget = mainWindow->tool(tr("Octave Interpreter"));
	    
	    if (widget)
	    {
			selectedLanguage = Octave;
			TCFunctionsListView::prefix = tr("tinkercell.");
			
	  	    if (octaveButton)
			    octaveButton->setChecked(true);
			
			if (octaveAction)
			    octaveAction->setChecked(true);

			OctaveTool * ocTool = static_cast<OctaveTool*>(widget);
    	    ConsoleWindow * outWin = console();
			if (outWin && ocTool->octaveInterpreter)
			{
				outWin->setInterpreter(ocTool->octaveInterpreter);
			}

			if (editor && editor->text().isEmpty())
				editor->setPlainText(tr("#use fromTC and toTC to convert from and to tinkercell objects"));
		}
	}
	
	void CodingWindow::enablePython(bool b)
	{
	    if (!b || selectedLanguage == Python) return;

	    QWidget * widget = mainWindow->tool(tr("Python Interpreter"));
	    
	    if (widget)
	    {    
			selectedLanguage = Python;
			TCFunctionsListView::prefix = tr("");
			
	   	    if (pythonButton)
			    pythonButton->setChecked(true);
			
			if (pythonAction)
			    pythonAction->setChecked(true);

			PythonTool * pyTool = static_cast<PythonTool*>(widget);
		    ConsoleWindow * outWin = console();
			if (outWin && pyTool->pythonInterpreter)
			{
				outWin->setInterpreter(pyTool->pythonInterpreter);
			}

			if (editor && editor->text().isEmpty())
				editor->setPlainText(tr("#use fromTC and toTC to convert from and to tinkercell objects"));
		}
	}

	void CodingWindow::enableRuby(bool b)
	{
	    if (!b || selectedLanguage == Ruby) return;

	    QWidget * widget = mainWindow->tool(tr("Ruby Interpreter"));
	    
	    if (widget)
	    {    
			selectedLanguage = Ruby;
			TCFunctionsListView::prefix = tr("Tinkercell.");
			
	   	    if (rubyButton)
			    rubyButton->setChecked(true);
			
			if (rubyAction)
			    rubyAction->setChecked(true);

			RubyTool * rubyTool = static_cast<RubyTool*>(widget);
		    ConsoleWindow * outWin = console();
			if (outWin && rubyTool->rubyInterpreter)
			{
				outWin->setInterpreter(rubyTool->rubyInterpreter);
			}

			if (editor && editor->text().isEmpty())
				editor->setPlainText(tr("#use fromTC and toTC to convert from and to tinkercell objects"));
		}
	}

	void CodingWindow::toggleSVNupdate(bool b)
	{
		QSettings * settings = MainWindow::getSettings();
		settings->beginGroup("Subversion");
		GlobalSettings::DO_SVN_UPDATE = b;
		settings->setValue(tr("auto-update"),b);
		settings->endGroup();
	}
	
	void CodingWindow::toolLoaded(Tool *)
	{
		static bool pyLoaded = false, rubyLoaded = false, ocLoaded = false, libCLoaded = false;
		if (!mainWindow) return;
		if (!pyLoaded && mainWindow->tool(tr("Python Interpreter")))
		{
			QWidget * widget = mainWindow->tool(tr("Python Interpreter"));
			if (widget)
			{
				PythonTool * pyTool = static_cast<PythonTool*>(widget);				
				connect(this,SIGNAL(runPython(const QString&)),pyTool,SLOT(runPythonCode(const QString&)));
				connect(this,SIGNAL(loadPyFromDir( const QString& )),pyTool,SLOT(loadFilesInDir( const QString& )));				
				pyLoaded = true;

				if (selectedLanguage == None)
					enablePython();
			}
		}

		if (!rubyLoaded && mainWindow->tool(tr("Ruby Interpreter")))
		{
			QWidget * widget = mainWindow->tool(tr("Ruby Interpreter"));
			if (widget)
			{
				RubyTool * rubyTool = static_cast<RubyTool*>(widget);				
				connect(this,SIGNAL(runRuby(const QString&)),rubyTool,SLOT(runRubyCode(const QString&)));
				connect(this,SIGNAL(loadRubyFromDir( const QString& )),rubyTool,SLOT(loadFilesInDir( const QString& )));				
				rubyLoaded = true;

				if (selectedLanguage == None)
					enableRuby();
			}
		}
		
		if (!ocLoaded && mainWindow->tool(tr("Octave Interpreter")))
		{
			QWidget * widget = mainWindow->tool(tr("Octave Interpreter"));
			if (widget)
			{
				OctaveTool * ocTool = static_cast<OctaveTool*>(widget);				
				connect(this,SIGNAL(runOctave(const QString&)),ocTool,SLOT(runOctaveCode(const QString&)));
				connect(this,SIGNAL(loadOctFromDir( const QString& )),ocTool,SLOT(loadFilesInDir( const QString& )));				
				ocLoaded = true;
				
				if (selectedLanguage == None)
					enableOctave();
			}
		}

		if (!libCLoaded && mainWindow->tool(tr("Load C Libraries")))
		{
			QWidget * widget = mainWindow->tool(tr("Load C Libraries"));
			if (widget)
			{
				LoadCLibrariesTool * loadCTool = static_cast<LoadCLibrariesTool*>(widget);
				connect(this,SIGNAL(compileBuildLoadC(const QString&,const QString&,const QString&)),
						loadCTool,SLOT(compileBuildLoadC(const QString&,const QString&,const QString&)));
				connect(this,SIGNAL(compile(const QString&, QString&)),
						loadCTool,SLOT(compile(const QString&, QString&)));
				
				libCLoaded = true;
			}
		}
	}

	bool CodingWindow::doSVNUpdate()
	{
		 QString homeDir = GlobalSettings::homeDir();

		QString s;
		int err = 0;
		if (!QFile::exists(GlobalSettings::homeDir() + QObject::tr("/.svn")) && !GlobalSettings::PLUGINS_SVN_URL.isEmpty())
		{
			s = QObject::tr("svn co ") + GlobalSettings::PLUGINS_SVN_URL + QObject::tr(" ") + homeDir;
			err = system(s.toAscii().data());
		}

	
	#ifdef Q_WS_WIN
		s = QObject::tr("cd ") + homeDir + QObject::tr("& svn update --force");
	#else
		s = QObject::tr("cd ") + homeDir + QObject::tr("; svn update --force");
	#endif
		err = system(s.toAscii().data());
	}

	bool CodingWindow::setMainWindow(MainWindow* main)
	{
		Tool::setMainWindow(main);

		QString appDir = QCoreApplication::applicationDirPath();

		QSplitter * splitter = new QSplitter(Qt::Horizontal);
        splitter->addWidget(editorWidget);
		QWidget * rightWidget = new QWidget;
		QVBoxLayout * rightLayout = new QVBoxLayout;
		rightLayout->addWidget(new QLabel(tr("double-click on a function to insert")),0);
		rightLayout->addWidget(new TCFunctionsListView(mainWindow, appDir + tr("/c"), editor),10);
		rightWidget->setLayout(rightLayout);
       	splitter->addWidget(rightWidget);
        splitter->setStretchFactor(0,2);

        window->setCentralWidget(splitter);
        window->setWindowTitle(name);

		if (mainWindow)
		{
			QDockWidget * dock = 0;
			setWindowTitle(name);
			setWindowIcon(QIcon(tr(":/images/cmd.png")));
			dock = mainWindow->addToolWindow(this, MainWindow::DockWidget, Qt::BottomDockWidgetArea, Qt::BottomDockWidgetArea);
			dock->move(mainWindow->geometry().bottomRight() - QPoint(sizeHint().width()*2,sizeHint().height()));
			dock->hide();
			dock->setFloating(true);

			QToolBar * toolBar = mainWindow->toolBarForTools;

			QAction * action = new QAction(tr("Coding Window"),toolBar);
			action->setIcon(QIcon(tr(":/images/tool.png")));

			QAction * updateAction = new QAction(tr("Update now"),toolBar);
			updateAction->setIcon(QIcon(tr(":/images/down.png")));
			updateAction->setToolTip(tr("Download plug-ins and modules to the TinkerCell home folder (usually inside the Documents folder)"));					
			connect(updateAction,SIGNAL(triggered()),this,SLOT(doSVNUpdate()));

			if (dock)
				connect(action,SIGNAL(triggered()),dock,SLOT(show()));
			else
			{
				if (mainWindow->viewMenu)
				{
					QAction * toggle = mainWindow->viewMenu->addAction(tr("Coding Window"));
					toggle->setCheckable(true);
					connect(toggle,SIGNAL(toggled(bool)),this,SLOT(setVisible(bool)));
				}
				connect(action,SIGNAL(triggered()),this,SLOT(show()));
			}
			
			if (mainWindow->settingsMenu)
			{
				QMenu * updateMenu = new QMenu(tr("&Updates..."));
				updateMenu->addAction(updateAction);
				QAction * svnupdate = updateMenu->addAction(tr("Automatic updates at start"));
				svnupdate->setToolTip(tr("Perform updates when TinkerCell starts"));					
				svnupdate->setCheckable(true);
				svnupdate->setChecked(GlobalSettings::DO_SVN_UPDATE);
				toggleSVNupdate(GlobalSettings::DO_SVN_UPDATE);
				connect(svnupdate,SIGNAL(toggled(bool)),this,SLOT(toggleSVNupdate(bool)));
				
				mainWindow->settingsMenu->addSeparator();
				mainWindow->settingsMenu->addMenu(updateMenu);
			}
			
			toolBar->addAction(action);
			toolBar->addAction(updateAction);

			if (mainWindow->helpMenu)
			{
				QList<QAction*> actions = mainWindow->helpMenu->actions();
				QAction * aboutAction = 0;
	
				for (int i=0; i < actions.size(); ++i)
					if (actions[i] && actions[i]->text() == tr("About"))
					{
						aboutAction = actions[i];
						break;	
					}
				if (aboutAction)
				{	
					mainWindow->helpMenu->removeAction(aboutAction);
					mainWindow->helpMenu->addSeparator();
					mainWindow->helpMenu->addAction(aboutAction);
				}
			}

			if (mainWindow->settingsMenu && cButton && pythonButton && octaveButton)
			{
				QMenu * langMenu = mainWindow->settingsMenu->addMenu(tr("Console language"));
				QActionGroup * actionGroup = new QActionGroup(this);
				
				cAction = langMenu->addAction(tr("C"));
				pythonAction = langMenu->addAction(tr("Python"));
				octaveAction = langMenu->addAction(tr("Octave"));
				rubyAction = langMenu->addAction(tr("Ruby"));
				
				connect(cAction,SIGNAL(toggled(bool)),this,SLOT(enableC(bool)));
				connect(pythonAction,SIGNAL(toggled(bool)),this,SLOT(enablePython(bool)));
				connect(octaveAction,SIGNAL(toggled(bool)),this,SLOT(enableOctave(bool)));
				connect(rubyAction,SIGNAL(toggled(bool)),this,SLOT(enableRuby(bool)));
                
				cAction->setCheckable(true);
				pythonAction->setCheckable(true);
				octaveAction->setCheckable(true);
				rubyAction->setCheckable(true);

				actionGroup->addAction(cAction);
				actionGroup->addAction(pythonAction);
				actionGroup->addAction(octaveAction);
				actionGroup->addAction(rubyAction);
				actionGroup->setExclusive(true);
			}
			
			usernameDialog = new QDialog(mainWindow);
			QVBoxLayout * layout = new QVBoxLayout;
			QHBoxLayout * layout1 = new QHBoxLayout;
			QHBoxLayout * layout2 = new QHBoxLayout;
			QHBoxLayout * layout3 = new QHBoxLayout;
			layout1->addWidget(new QLabel("Username : "),0);
			layout2->addWidget(new QLabel("Password : "),0);
			usernameLine = new QLineEdit("");
			passwordLine = new QLineEdit("");
			passwordLine->setEchoMode(QLineEdit::Password);

			layout1->addWidget(usernameLine,1);
			layout2->addWidget(passwordLine,1);
			
			QPushButton * okButton = new QPushButton("&OK");
			layout3->addStretch(3);
			layout3->addWidget(okButton,1);
			layout3->addStretch(3);
			
			layout->addLayout(layout1);
			layout->addLayout(layout2);
			layout->addLayout(layout3);
			connect(okButton,SIGNAL(released()),usernameDialog,SLOT(accept()));
			usernameDialog->setLayout(layout);
			
			connect(mainWindow, SIGNAL(toolLoaded(Tool*)), this, SLOT(toolLoaded(Tool*)));
			
			return true;
		}
		return false;
	}

	 void CodingWindow::about()
	 {
		 QMessageBox::about(this, tr("About Coding Window"),
					 tr("This tool allows run-time execution of C, Python, and Octave code. The code can also be added permanently to TinkerCell."));
	 }

	 void CodingWindow::setupEditor()
	 {
		QFont font;
		font.setFamily("Courier");
		font.setFixedPitch(true);

		font.setPointSize(10);

		editor = new RuntimeCodeEditor;
		editor->setFont(font);

		highlighter = new CodingWindowSyntaxHighlighter(editor->document());
		
		cAction = octaveAction = pythonAction = 0;

		cButton = new QRadioButton("C");
		if (GlobalSettings::ENABLE_OCTAVE)
	        octaveButton = new QRadioButton("Octave");
		else
	        octaveButton = 0;
	   
	    if (GlobalSettings::ENABLE_PYTHON)
            pythonButton = new QRadioButton("Python");
		else
        	pythonButton = 0;

		if (GlobalSettings::ENABLE_RUBY)
	        rubyButton = new QRadioButton("Ruby");
		else
	        rubyButton = 0;
		
		connect(cButton,SIGNAL(toggled(bool)),this,SLOT(enableC(bool)));
		connect(pythonButton,SIGNAL(toggled(bool)),this,SLOT(enablePython(bool)));
		connect(octaveButton,SIGNAL(toggled(bool)),this,SLOT(enableOctave(bool)));
		connect(rubyButton,SIGNAL(toggled(bool)),this,SLOT(enableRuby(bool)));
		 
 		QHBoxLayout * layout1 = new QHBoxLayout;
 		layout1->addWidget(cButton,0);
 		layout1->addWidget(pythonButton,0);
 		layout1->addWidget(octaveButton,0);
 		layout1->addWidget(rubyButton,0);
 		layout1->addStretch(1);
 		
 		QVBoxLayout * layout2 = new QVBoxLayout;
 		layout2->addLayout(layout1);
		layout2->addWidget(editor);
		//layout2->setContentsMargins(0,0,0,0);
		
		editorWidget = new QWidget(this);
		editorWidget->setLayout(layout2);
	 }

	 void CodingWindow::setupMenu()
	 {
		 toolBar = new QToolBar(window);
		 QAction * action;

		 action = toolBar->addAction(QIcon(":/images/new.png"),tr("New"),this,SLOT(newDoc()));
		 action->setShortcut(QKeySequence(QKeySequence::New));
		 action->setToolTip(tr("New"));

		 //action = toolBar->addAction(QIcon(":/images/open.png"),tr("Open"),this,SLOT(open()));
		 //action->setShortcut(QKeySequence(QKeySequence::Open));
		 //action->setToolTip(tr("Open"));

		 action = toolBar->addAction(QIcon(":/images/save.png"),tr("Save"),this,SLOT(convertCodeToButton()));
		 action->setShortcut(QKeySequence(QKeySequence::Save));
		 action->setToolTip(tr("Incorporate in TinkerCell"));

		 action = toolBar->addAction(QIcon(":/images/undo.png"),tr("Undo"),this,SLOT(undo()));
		 action->setToolTip(tr("Undo"));

		 action = toolBar->addAction(QIcon(":/images/redo.png"),tr("Redo"),this,SLOT(redo()));
		 action->setToolTip(tr("Redo"));

		 //action = toolBar->addAction(QIcon(":/images/cmd.png"),tr("Command"),&commandDialog,SLOT(exec()));
		 //action->setToolTip(tr("Edit command"));

		 action = toolBar->addAction(QIcon(":/images/play.png"),tr("Run"),this,SLOT(run()));
		 action->setToolTip(tr("Run code"));

		 //action = toolBar->addAction(QIcon(":/images/function.png"),tr("Buttonize"),this,SLOT(convertCodeToButton()));
		 //action->setToolTip(tr("Add code to the functions list"));

		 action = toolBar->addAction(QIcon(":/images/about.png"),tr("About"),this,SLOT(about()));
		 action->setToolTip(tr("About"));

		 //new QShortcut(tr("Ctrl+S"),this,SLOT(save()),SLOT(save()),Qt::WidgetShortcut);
		 //new QShortcut(tr("Ctrl+N"),this,SLOT(newDoc()),SLOT(newDoc()),Qt::WidgetShortcut);
		 //new QShortcut(tr("Ctrl+A"),this,SLOT(selectAll()),SLOT(selectAll()),Qt::WidgetShortcut);
		 
		 QToolButton * findButton = new QToolButton;
		 findButton->setIcon(QIcon(tr(":/images/find.png")));
		 findButton->setToolTip("Find or replace text");
		 connect(findButton, SIGNAL(pressed()), editor, SLOT(showFindReplaceDialog()));
		 toolBar->addWidget(findButton);
		 window->addToolBar(toolBar);

		 //editorC->grabShortcut(tr("Ctrl+S"));
		 //editorC->grabShortcut(tr("Ctrl+N"));
		 //editorC->grabShortcut(tr("Ctrl+A"));
	 }

	void CodingWindow::showFindReplaceDialog()
	{
		if (editor)
			editor->showFindReplaceDialog();
	}

	void CodingWindow::newDoc()
	{
		if (editor)
		{
		    editor->clear();
			editor->defaultSavedFilename.clear();

			if (selectedLanguage == C)
			{
                enableC();
			}
			else
			if (selectedLanguage == Python)
			{
                enablePython();
			}
			else
			if (selectedLanguage == Octave)
			{
                enableOctave();
			}
		}
	}

	void CodingWindow::selectAll()
	{
		if (editor)
		{
			editor->selectAll();
		}
	}

	void CodingWindow::open()
	{
		if (editor)
		{
			if (selectedLanguage == C)
				editor->open("C Files (*.c)");
			else
			if (selectedLanguage == Python)
				editor->open("Python Files (*.py)");
			else
			if (selectedLanguage == Octave)
				editor->open("Octave Files (*.m)");
		}
	}

	void CodingWindow::save()
	{
		if (editor)
		{
			if (selectedLanguage == C)
				editor->save("C Files (*.c)");
			else
			if (selectedLanguage == Python)
				editor->save("Python Files (*.py)");
			else
			if (selectedLanguage == Octave)
				editor->save("Octave Files (*.m)");
		}
	}

	void CodingWindow::undo()
	{
		if (editor)
		{
			editor->undo();
		}
	}

	void CodingWindow::redo()
	{
		if (editor)
		{
			editor->redo();
		}
	}

	 void CodingWindow::run()
	 {
		if (editor)
		{
			if (selectedLanguage == C)
				runC(editor->toPlainText());
            else
			if (selectedLanguage == Python)
				emit runPython(editor->toPlainText());
			else
			if (selectedLanguage == Ruby)
				emit runRuby(editor->toPlainText());
            else
			if (selectedLanguage == Octave)
				emit runOctave(editor->toPlainText());
		}
	 }

	 void CodingWindow::runC(const QString& code)
	 {
		if (mainWindow == 0) return;

 		QFile qfile(fileName);
		if (!qfile.open(QIODevice::WriteOnly | QIODevice::Text))
			 return;

		QTextStream out(&qfile);
        if (code.contains( QRegExp(tr("TCAPIEXPORT void\\s+run\\s*\\(\\s*\\)")) ))
		{
			out << code;
		}
		else
		{
            QMessageBox::information(mainWindow,tr("Error"),tr("code must define: TCAPIEXPORT void run()"));
			return;
		}

		qfile.close();

		emit compileBuildLoadC(tr("code.c -lode -lssa"),tr("run"),tr("C code"));
	 }

	 QSize CodingWindow::sizeHint() const
	 {
		 return QSize(500,300);
	 }


	 /********************************
	      TEXT EDITOR
	 *********************************/

	 void RuntimeCodeEditor::open(const QString& ext)
	 {
		 QString fileName;

		 if (fileName.isNull())
			 fileName = QFileDialog::getOpenFileName(this,
				 tr("Open File"), MainWindow::previousFileName, ext);

		 if (!fileName.isEmpty()) {
			 QFile file(fileName);
			 if (file.open(QFile::ReadOnly | QFile::Text))
				 setPlainText(file.readAll());

		 }
	 }

	 void RuntimeCodeEditor::save(const QString& ext)
	 {
		 QString fileName;

		 if (defaultSavedFilename.contains(ext))
			fileName = defaultSavedFilename[ext];

		 if (fileName.isNull() || fileName.isEmpty())
		 {
			 fileName = QFileDialog::getSaveFileName(this, tr("Save File"),MainWindow::previousFileName, ext);
		 }

		 if (!fileName.isNull() && !fileName.isEmpty())
		 {
			 MainWindow::previousFileName = fileName.remove(QRegExp(tr("\\.*")));
			 QFile file(fileName);
			 if (file.open(QFile::WriteOnly | QFile::Text))
			 {
				 file.write(toPlainText().toAscii());
				 defaultSavedFilename[ext] = fileName;
			 }
		 }
	 }

	 void RuntimeCodeEditor::saveAs(const QString& ext)
	 {
		 QString fileName;

		 if (fileName.isNull())
			 fileName = QFileDialog::getSaveFileName(this,
				 tr("Save File"), MainWindow::previousFileName, ext);

		 if (!fileName.isNull() && !fileName.isEmpty())
		 {
			 MainWindow::previousFileName = fileName.remove(QRegExp(tr("\\.*")));
			 QFile file(fileName);
			 if (file.open(QFile::WriteOnly | QFile::Text))
			 {
				 file.write(toPlainText().toAscii());
			 }
		 }
	 }
/*
	 void RuntimeCodeEditor::keyPressEvent ( QKeyEvent * keyEvent )
	 {
		 if (keyEvent == 0) return;
		 if (completer.widget() != this) completer.setWidget(this);
		 int key = keyEvent->key();
		 if (keyEvent->modifiers() == Qt::ControlModifier)
		 {
			 if (key == Qt::Key_Equal)
			 {
				 zoomIn();
			 }
			 else
			 if (key == Qt::Key_Minus)
			 {
				 zoomOut();
			 }
			 else
			 if (key == Qt::Key_A)
			 {
				 selectAll();
			 }
			 else
			 {
				 CodeEditor::keyPressEvent(keyEvent);
			 }
			 return;
		 }

		 if (completer.popup()->isVisible())
		 {
			 // The following keys are forwarded by the completer to the widget
			switch (keyEvent->key())
			{
				case Qt::Key_Enter:
				case Qt::Key_Return:
				case Qt::Key_Escape:
				case Qt::Key_Tab:
					keyEvent->ignore();
					 return;
				case Qt::Key_Backtab:
 					 CodeEditor::keyPressEvent(keyEvent);
					 return; // let the completer do default behavior
				default:
					break;
			}
		}

		 if (keyEvent->text().isEmpty())
		 {
			 CodeEditor::keyPressEvent(keyEvent);
			 return;
		 }
		QTextCursor tc = textCursor();
		tc.movePosition(QTextCursor::Left);
		tc.select(QTextCursor::WordUnderCursor);
		QString completionPrefix = tc.selectedText().trimmed();
		tc.movePosition(QTextCursor::Right);

		if (completionPrefix.length() < 1)
		{
			completer.popup()->hide();
			CodeEditor::keyPressEvent(keyEvent);
			return;
		}

		//auto complete
		if (completionPrefix != completer.completionPrefix())
		{
			completer.setCompletionPrefix(completionPrefix);
			completer.popup()->setCurrentIndex(completer.completionModel()->index(0, 0));
		}
		QRect cr = cursorRect();
		cr.setWidth(completer.popup()->sizeHintForColumn(0)
                    + completer.popup()->verticalScrollBar()->sizeHint().width());

		CodeEditor::keyPressEvent(keyEvent);

		completer.complete(cr); // show functions
	 }
*/
	 void RuntimeCodeEditor::insertCompletion(const QString& completion)
	 {
		 if (completer.widget() != this)
			 return;
		 QTextCursor tc = textCursor();
		 int extra = completion.length() - completer.completionPrefix().length();
		 tc.movePosition(QTextCursor::Left);
		 tc.movePosition(QTextCursor::EndOfWord);
		 tc.insertText(completion.right(extra));
		 setTextCursor(tc);
	 }

	 /********************************
	      FUNCTIONS LIST
	 *********************************/

	 TCFunctionsListView::TCFunctionsListView(MainWindow* mainWindow, const QString& cDir, CodeEditor * textEdit)
	 {
		 console = mainWindow->console();
		 if (!cDir.isEmpty()) readCHeaders(cDir);
		 sortItems(0,Qt::AscendingOrder);
		 setSelectionMode(QAbstractItemView::SingleSelection);
		 setEditTriggers(QAbstractItemView::NoEditTriggers);
		 setAlternatingRowColors ( true );
		 setHeaderHidden ( true );
		 if (textEdit)
			 connect(this,SIGNAL(insertText(const QString&)),textEdit,SLOT(insertPlainText(const QString&)));
	 }

	 void TCFunctionsListView::readCHeaders(const QString& dirname)
	 {
		 QDir dir(dirname);
		 dir.setFilter(QDir::Files);
		 dir.setSorting(QDir::Name);

		 QFileInfoList list = dir.entryInfoList();
		 //QApplication::setOverrideCursor(QCursor(Qt::WaitCursor));

		 QHash<QString,QTreeWidgetItem*> tree;
		 
		 QStringList visitedFunctions;

		 for (int i = 0; i < list.size(); ++i)
		 {
			QFileInfo fileInfo = list.at(i);
			QFile file(fileInfo.absoluteFilePath());
			if (!fileInfo.baseName().startsWith(tr("TC_")) || fileInfo.completeSuffix().toLower() != tr("h") || !file.open(QFile::ReadOnly)) continue;
			
			QRegExp regexComments(tr("brief\\s*([^\\n\\r]+)"));
			QRegExp regexGroup(tr("ingroup\\s*([^\\n\\r]+)"));
			QRegExp regexFunction(tr("\\s*(\\S+)\\s*(tc_[A-Za-z0-9]+)\\s*(\\([^\\)]*\\))"));
			QRegExp charstar(tr("char\\s*\\*"));
			QRegExp voidstar(tr("void\\s*\\*"));
			QTreeWidgetItem * currentItem = 0;
			QString currentComment;

			 while (!file.atEnd())
			 {
				 QString line(file.readLine());
				 line.replace(charstar,tr("string"));
				 line.replace(voidstar,tr("item"));
				 
				 regexGroup.indexIn(line);
				 regexComments.indexIn(line);
				 regexFunction.indexIn(line);
				 if (regexGroup.numCaptures() > 0 && regexGroup.capturedTexts().at(1).length() > 1)
				 {
					QString s = regexGroup.capturedTexts().at(1); //category
					if (s.contains(QRegExp("\\s*init\\s*")))
					{
						currentItem = 0;
						continue;
					}
					if (tree.contains(s))
					{
						currentItem = tree[s];
					}
					else
					{
						currentItem = new QTreeWidgetItem(QStringList() << s);
						tree[s] = currentItem;
						addTopLevelItem(currentItem);
					}
				 }

				 if (regexComments.numCaptures() > 0 && regexComments.capturedTexts().at(1).length() > 1)
				 {
					QString s = regexComments.capturedTexts().at(1); //comment
					currentComment = s;
				 }

				 if (currentItem && regexFunction.numCaptures() > 0 && regexFunction.capturedTexts().at(1).length() > 0)
				 {
					QString name, args, ret, str;
					name = regexFunction.capturedTexts().at(2);
					if (visitedFunctions.contains(name)) continue;
					visitedFunctions << name.trimmed();
					
					ret = regexFunction.capturedTexts().at(1);
					args = regexFunction.capturedTexts().at(3);
					args.replace(tr("const char*"),tr("string"));
					args.replace(tr("const char *"),tr("string"));
					args.replace(tr("long"),tr("item"));
					
					if (ret == tr("void"))
						str = name + args;
					else
						str = ret + tr(" var = ") + name + args;

					QTreeWidgetItem * childItem = new QTreeWidgetItem(QStringList() << name << str);
					currentItem->addChild(childItem);
					childItem->setToolTip(0,currentComment);
					childItem->setWhatsThis(0,currentComment);
				 }
			 }
			file.close();
		 }
		 
		 if (console && console->editor() && !console->editor()->completer())
		 {
		 	//visitedFunctions << "clear";
			QCompleter * completer = new QCompleter(visitedFunctions,this);			
			//completer->setModel(new QStringListModel(visitedFunctions, completer));
			//completer->setModelSorting(QCompleter::CaseInsensitivelySortedModel);
			//completer->setWrapAround(false);
			completer->setCaseSensitivity(Qt::CaseSensitive);
			
			console->editor()->setCompleter(completer);
		 }
	 }

	 void TCFunctionsListView::mouseDoubleClickEvent ( QMouseEvent *  )
	 {
		 QTreeWidgetItem * item = this->currentItem();
		 if (item && indexOfTopLevelItem(item) == -1)
		 {
			QString s = item->text(1);
			if (!TCFunctionsListView::prefix.isEmpty())
				s.replace(QString("tc_"), TCFunctionsListView::prefix + QString("tc_"));
			emit insertText(s);
		 }
	 }

	 void TCFunctionsListView::keyPressEvent ( QKeyEvent * event )
	 {
		 if (event &&
			 (event->key() == Qt::Key_Enter ||
			 event->key() == Qt::Key_Return ||
			  event->key() == Qt::Key_Space ||
			  event->key() == Qt::Key_Tab))
		 {
			QTreeWidgetItem * item = this->currentItem();
			 if (item && indexOfTopLevelItem(item) == -1)
			 {
				QString s = item->text(1);
				if (!TCFunctionsListView::prefix.isEmpty())
					s.replace(QString("tc_"), TCFunctionsListView::prefix + QString("tc_"));
				emit insertText(s);
			 }
		 }
	 }

	 void CodingWindow::setVisible ( bool visible )
	 {
		activateWindow();
		if (isMinimized())
			showNormal();
		Tool::setVisible(visible);
	 }

	void CodingWindow::setCode(const QString& code)
	{
		if (editor)
			editor->setPlainText(code);
	}

	QString TCFunctionsListView::prefix = QString();
}

=======
/****************************************************************************
 Copyright (c) 2008 Deepak Chandran
 Contact: Deepak Chandran (dchandran1@gmail.com)
 see COPYRIGHT.TXT

 Provides a text window where C code can be written and run dynamically

****************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <QFile>
#include <QMessageBox>
#include <QProcess>
#include "GraphicsScene.h"
#include "MainWindow.h"
#include "NodeGraphicsItem.h"
#include "ConnectionGraphicsItem.h"
#include "TextGraphicsItem.h"
#include "ConsoleWindow.h"
#include "coding/CodingWindow.h"
#include "coding/PythonTool.h"
#include "coding/OctaveTool.h"
#include "coding/RubyTool.h"
#include "coding/LoadCLibraries.h"
#include "GlobalSettings.h"
#include <QRegExp>
#include <QVBoxLayout>
#include <QDockWidget>
#include <QProcess>
#include <QLibrary>
#include <QDir>
#include <QtDebug>
#include <QDesktopServices>

namespace Tinkercell
{
	 /********************************
	      Coding window
	 *********************************/

	CodingWindow::CodingWindow()
		 : Tool(tr("Coding Window"),tr("Coding"))
	{
	 	 selectedLanguage = None;
		
		 QString appDir = QCoreApplication::applicationDirPath();
		 QString homeDir = GlobalSettings::homeDir();
		 QString tempDir = GlobalSettings::tempDir();
		 fileName = tempDir + tr("/code.c");
		 
		 toolBar = 0;
		 window = new QMainWindow;

		 setupEditor();
		 setupMenu();
		 
 		 QSettings * settings = MainWindow::getSettings();
 		 
		 settings->beginGroup("Subversion");
	 	 if (QDir(homeDir).exists())
			GlobalSettings::DO_SVN_UPDATE = settings->value(tr("auto-update"),false).toBool();
		else
			GlobalSettings::DO_SVN_UPDATE = settings->value(tr("auto-update"),true).toBool();	
		 settings->endGroup();
		 
		 delete settings;

	#ifdef Q_WS_WIN

		tempDir.replace(QObject::tr("/"),QObject::tr("\\"));
		appDir.replace(QObject::tr("/"),QObject::tr("\\"));
		homeDir.replace(QObject::tr("/"),QObject::tr("\\"));
		homeDir = QObject::tr("\"") + homeDir + QObject::tr("\"");

		QString s1(QObject::tr("copy \"") + appDir + QObject::tr("\"\\win32\\*.* \"") + tempDir + QObject::tr("\" /Y"));
		//if (system(s1.toAscii().data()) < 0)
			//QMessageBox::information(Tinkercell::MainWindow::instance(), "Error", "Unable to copy some needed GCC files to temporary folder");

	#endif
		
		if (GlobalSettings::DO_SVN_UPDATE)
		{
			doSVNUpdate();
		}
		
		usernameDialog = 0;
		usernameLine = 0;
		passwordLine = 0;

		QHBoxLayout * layout = new QHBoxLayout;
		layout->addWidget(window);
		layout->setContentsMargins(0,0,0,0);
		setLayout(layout);
		setWindowFlags(Qt::Window);
	}
	
	void CodingWindow::convertCodeToButton()
	{
		if (selectedLanguage == Python)
			convertCodeToButtonPy();
		else
		if (selectedLanguage == Ruby)
			convertCodeToButtonRuby();
		else
		if (selectedLanguage == Octave)
			convertCodeToButtonOctave();
		else
		if (selectedLanguage == C)
			convertCodeToButtonC();
	}

	void CodingWindow::convertCodeToButtonC()
	{
		QString code = editor->toPlainText();
		if (!code.contains("tc_addFunction"))
		{
			code += 
			tr("\n\nTCAPIEXPORT void tc_main()\n{\n\
    /*the last three arguments are: specific family (string), show in menu (1 or 0), context menu (1 or 0), set as default function (1 or 0)*/ \n\n\
    tc_addFunction(&run, \n\
\"Function name\", \n\
\"Short description\", \n\
\"Category\", \n\
\"plugins/c/function.png\", \n\
\"\", 1, 0, 0); \n}\n\n");
			editor->setPlainText(code);
			QMessageBox::information(this,tr("Program description missing"),tr("tc_main and tc_addFunction are required for adding a new C function to the programs menu. Take a look at the code."));
			return;
		}
		
		QString tempDir = GlobalSettings::tempDir();
		QString homeDir = GlobalSettings::homeDir();
		
		QString filename = tempDir + tr("/code.c");
		QFile qfile(filename);
		if (!qfile.open(QIODevice::WriteOnly | QIODevice::Text))
		{
			QMessageBox::about(this, tr("Error"),
					 tr("Cannot write file: ") + tempDir + tr("/code.c"));
			return;
		}
		
		QString dllName = QInputDialog::getText(this,tr("Program name"),tr("Name your program (one words):"));
		dllName.replace(QRegExp("[^A-Za-z0-9]"),tr("_"));

		QTextStream out(&qfile);
		out << code;
		qfile.close();

		QDir pluginsDir(homeDir + tr("/") +  tr("@TINKERCELL_C_PLUGINS_FOLDER@"));

		if (!pluginsDir.exists()) return;
		
		dllName = homeDir + tr("/") +  tr("@TINKERCELL_C_PLUGINS_FOLDER@") + tr("/") + dllName;
		emit compile(tr("code.c"),dllName);
		
		QPair<QString,QString> login = requestLoginInfo();
		QString username = login.first;
		QString password = login.second;

		if (!username.isEmpty() && !password.isEmpty())
		{
		#ifdef Q_WS_WIN
			homeDir.replace(tr("/"),tr("\\"));
			homeDir = tr("\"") + homeDir + tr("\"");
			QString s = QObject::tr("cd ") + homeDir + QObject::tr("& svn add ") + dllName + QObject::tr("& svn commit -m\"new code added\" --username ") + username + QObject::tr(" --password ") + password + QObject::tr(" --no-auth-cache --non-interactive");
		#else
			QString s = QObject::tr("cd ") + homeDir + QObject::tr("; svn add ") + dllName + QObject::tr("; svn commit -m\"new code added\" --username ") + username + QObject::tr(" --password ") + password + QObject::tr(" --no-auth-cache --non-interactive");
		#endif
			system(s.toAscii().data());
		}
		
		QMessageBox::information(this,tr("Saved"),tr("The program ") + dllName + tr(" has been saved and uploaded"));		
		
		mainWindow->loadDynamicLibrary(dllName);
	}
	
	QPair<QString,QString> CodingWindow::requestLoginInfo()
	{
		if (!MainWindow::instance())
			return QPair<QString,QString>("","");
			
		QSettings * settings = MainWindow::getSettings();
		settings->beginGroup("Subversion");
		QString username = settings->value(tr("svn-username")).toString();
		QString password = settings->value(tr("svn-password")).toString();
		
		Tool * tool = MainWindow::instance()->tool(QObject::tr("Coding Window"));
		if (tool)
		{
			CodingWindow * codingWindow = static_cast<CodingWindow*>(tool);
			codingWindow->usernameLine->setText(username);
			codingWindow->passwordLine->setText(password);
			codingWindow->usernameDialog->exec();
			username = codingWindow->usernameLine->text();
			password = codingWindow->passwordLine->text();
		}
		
		settings->setValue(tr("svn-username"),username);
		settings->setValue(tr("svn-password"),password);
		settings->endGroup();
		
		return QPair<QString,QString>( username, password);
	}

	void CodingWindow::convertCodeToButtonPy()
	{
		if (!editor || !usernameDialog || !usernameLine || !passwordLine) return;
		
		QString text = editor->toPlainText();
		if (!text.startsWith("\"\"\""))
		{
			text = tr("\"\"\"\n\
category: Miscellaneous\n\
name: name of program\n\
description: what does this program do?\n\
icon: plugins/c/function.png\n\
menu: yes\n\
tool: yes\n\
specific for:\n\"\"\"\n\n") + text;
			editor->setPlainText(text);
			QMessageBox::information(this,tr("Program description missing"),tr("Please enter the program description in comments"));
			return;
		}		
		
		QString homeDir = GlobalSettings::homeDir();
		QDir userHomeDir(homeDir);
		
		if (!userHomeDir.cd(tr("python")))
		{
			userHomeDir.mkdir(tr("python"));
			if (!userHomeDir.cd(tr("python")))
			{
				QMessageBox::information(this,tr("Error"),tr("TinkerCell is not able to write to ") + userHomeDir.absolutePath());
				return;
			}
		}
		
		QString filename = QFileDialog::getSaveFileName(this,tr("Save your program"),userHomeDir.absolutePath(),tr("*.py"));
		
		QFile pyfile(filename);
		
		if (!pyfile.open(QIODevice::WriteOnly | QIODevice::Text))
			return;
		else
		{
			QTextStream outpy(&pyfile);
			outpy << (editor->toPlainText());
			pyfile.close();
			
			QPair<QString,QString> login = requestLoginInfo();
			QString username = login.first;
			QString password = login.second;

			if (!username.isEmpty() && !password.isEmpty())
			{
			#ifdef Q_WS_WIN
				homeDir.replace(tr("/"),tr("\\"));
				homeDir = tr("\"") + homeDir + tr("\"");
				QString s = QObject::tr("cd ") + userHomeDir.absolutePath() + QObject::tr("& svn add ") + filename + QObject::tr("& svn commit -m\"new code added\" --username ") + username + QObject::tr(" --password ") + password + QObject::tr(" --no-auth-cache --non-interactive");
			#else
				QString s = QObject::tr("cd ") + userHomeDir.absolutePath() + QObject::tr("; svn add ") + filename + QObject::tr("; svn commit -m\"new code added\" --username ") + username + QObject::tr(" --password ") + password + QObject::tr(" --no-auth-cache --non-interactive");
			#endif
				system(s.toAscii().data());
			}

			QMessageBox::information(mainWindow, "Saved", tr("Saved and uploaded ") + filename);
		}
		
		emit loadPyFromDir(userHomeDir.absolutePath());
	}

	void CodingWindow::convertCodeToButtonRuby()
	{
		if (!editor || !usernameDialog || !usernameLine || !passwordLine) return;
		
		QString text = editor->toPlainText();
		if (!text.startsWith("\"\"\""))
		{
			text = tr("\"\"\"\n\
category: Miscellaneous\n\
name: name of program\n\
description: what does this program do?\n\
icon: plugins/c/function.png\n\
menu: yes\n\
tool: yes\n\
specific for:\n\"\"\"\n\n") + text;
			editor->setPlainText(text);
			QMessageBox::information(this,tr("Program description missing"),tr("Please enter the program description in comments"));
			return;
		}		
		
		QString homeDir = GlobalSettings::homeDir();
		QDir userHomeDir(homeDir);
		
		if (!userHomeDir.cd(tr("ruby")))
		{
			userHomeDir.mkdir(tr("ruby"));
			if (!userHomeDir.cd(tr("ruby")))
			{
				QMessageBox::information(this,tr("Error"),tr("TinkerCell is not able to write to ") + userHomeDir.absolutePath());
				return;
			}
		}
		
		QString filename = QFileDialog::getSaveFileName(this,tr("Save your program"),userHomeDir.absolutePath(),tr("*.rb"));
		
		QFile rubyfile(filename);
		
		if (!rubyfile.open(QIODevice::WriteOnly | QIODevice::Text))
			return;
		else
		{
			QTextStream outruby(&rubyfile);
			outruby << (editor->toPlainText());
			rubyfile.close();
			
			QPair<QString,QString> login = requestLoginInfo();
			QString username = login.first;
			QString password = login.second;

			if (!username.isEmpty() && !password.isEmpty())
			{
			#ifdef Q_WS_WIN
				homeDir.replace(tr("/"),tr("\\"));
				homeDir = tr("\"") + homeDir + tr("\"");
				QString s = QObject::tr("cd ") + userHomeDir.absolutePath() + QObject::tr("& svn add ") + filename + QObject::tr("& svn commit -m\"new code added\" --username ") + username + QObject::tr(" --password ") + password + QObject::tr(" --no-auth-cache --non-interactive");
			#else
				QString s = QObject::tr("cd ") + userHomeDir.absolutePath() + QObject::tr("; svn add ") + filename + QObject::tr("; svn commit -m\"new code added\" --username ") + username + QObject::tr(" --password ") + password + QObject::tr(" --no-auth-cache --non-interactive");
			#endif
				system(s.toAscii().data());
			}
			QMessageBox::information(mainWindow, "Saved", tr("Saved and uploaded ") + filename);
		}
		
		emit loadRubyFromDir(userHomeDir.absolutePath());
	}
	
	void CodingWindow::convertCodeToButtonOctave()
	{
		if (!editor || !usernameDialog || !usernameLine || !passwordLine) return;
		
		QString text = editor->toPlainText();
		if (!text.contains("#category") || !text.contains("#name"))
		{
			text = tr("\
#category: Miscellaneous\n\
#name: My function\n\
#description: This program does something\n\
#icon: plugins/c/function.png\n\
#menu: yes\n\
#tool: yes\n\
#specific for:\n\n") + text;
			editor->setPlainText(text);
			QMessageBox::information(this,tr("Program description missing"),tr("Please enter the program description in comments"));
			return;
		}
		
		QString homeDir = GlobalSettings::homeDir();
		QDir userHomeDir(homeDir);
		
		if (!userHomeDir.cd(tr("octave")))
		{
			userHomeDir.mkdir(tr("octave"));
			if (!userHomeDir.cd(tr("octave")))
			{
				QMessageBox::information(this,tr("Error"),tr("Unable to write to ") + userHomeDir.absolutePath());
				return;
			}
		}
		
		QString filename = QFileDialog::getSaveFileName(this,tr("Save your program"),userHomeDir.absolutePath(),tr("*.py"));
		
		QFile octfile(filename);
		
		if (!octfile.open(QIODevice::WriteOnly | QIODevice::Text))
			return;
		else
		{	
			QTextStream outoct(&octfile);
			outoct << (editor->toPlainText());
			octfile.close();
			
			QPair<QString,QString> login = requestLoginInfo();
			QString username = login.first;
			QString password = login.second;

			if (!username.isEmpty() && !password.isEmpty())
			{
			#ifdef Q_WS_WIN
				homeDir.replace(tr("/"),tr("\\"));
				homeDir = tr("\"") + homeDir + tr("\"");
				QString s = QObject::tr("cd ") + userHomeDir.absolutePath() + QObject::tr("& svn add ") + filename + QObject::tr("& svn commit -m\"new code added\" --username ") + username + QObject::tr(" --password ") + password + QObject::tr(" --no-auth-cache --non-interactive");
			#else
				QString s = QObject::tr("cd ") + userHomeDir.absolutePath() + QObject::tr("; svn add ") + filename + QObject::tr("; svn commit -m\"new code added\" --username ") + username + QObject::tr(" --password ") + password + QObject::tr(" --no-auth-cache --non-interactive");
			#endif
				system(s.toAscii().data());
			}
			QMessageBox::information(mainWindow, "Saved", tr("Saved and uploaded ") + filename);
		}
		
		emit loadOctFromDir(userHomeDir.absolutePath());
	}
	
	void CodingWindow::enableC(bool b)
	{
	    if (!b || selectedLanguage == C) return;
	    
	    selectedLanguage = C;
		TCFunctionsListView::prefix = tr("");
	    
	    if (cButton)
	        cButton->setChecked(true);
	    
	    if (cAction)
	        cAction->setChecked(true);
	    
	    if (editor)
	 		editor->setPlainText(tr("#include \"TC_api.h\"\nTCAPIEXPORT void run()\n{\n\n\n\n   return; \n}\n"));
	}
	
	void CodingWindow::enableOctave(bool b)
	{  
	    if (!b || selectedLanguage == Octave) return;
	    
	    QWidget * widget = mainWindow->tool(tr("Octave Interpreter"));
	    
	    if (widget)
	    {
			selectedLanguage = Octave;
			TCFunctionsListView::prefix = tr("tinkercell.");
			
	  	    if (octaveButton)
			    octaveButton->setChecked(true);
			
			if (octaveAction)
			    octaveAction->setChecked(true);

			OctaveTool * ocTool = static_cast<OctaveTool*>(widget);
    	    ConsoleWindow * outWin = console();
			if (outWin && ocTool->octaveInterpreter)
			{
				outWin->setInterpreter(ocTool->octaveInterpreter);
			}

			if (editor && editor->text().isEmpty())
				editor->setPlainText(tr("#use fromTC and toTC to convert from and to tinkercell objects"));
		}
	}
	
	void CodingWindow::enablePython(bool b)
	{
	    if (!b || selectedLanguage == Python) return;

	    QWidget * widget = mainWindow->tool(tr("Python Interpreter"));
	    
	    if (widget)
	    {    
			selectedLanguage = Python;
			TCFunctionsListView::prefix = tr("");
			
	   	    if (pythonButton)
			    pythonButton->setChecked(true);
			
			if (pythonAction)
			    pythonAction->setChecked(true);

			PythonTool * pyTool = static_cast<PythonTool*>(widget);
		    ConsoleWindow * outWin = console();
			if (outWin && pyTool->pythonInterpreter)
			{
				outWin->setInterpreter(pyTool->pythonInterpreter);
			}

			if (editor && editor->text().isEmpty())
				editor->setPlainText(tr("#use fromTC and toTC to convert from and to tinkercell objects"));
		}
	}

	void CodingWindow::enableRuby(bool b)
	{
	    if (!b || selectedLanguage == Ruby) return;

	    QWidget * widget = mainWindow->tool(tr("Ruby Interpreter"));
	    
	    if (widget)
	    {    
			selectedLanguage = Ruby;
			TCFunctionsListView::prefix = tr("Tinkercell.");
			
	   	    if (rubyButton)
			    rubyButton->setChecked(true);
			
			if (rubyAction)
			    rubyAction->setChecked(true);

			RubyTool * rubyTool = static_cast<RubyTool*>(widget);
		    ConsoleWindow * outWin = console();
			if (outWin && rubyTool->rubyInterpreter)
			{
				outWin->setInterpreter(rubyTool->rubyInterpreter);
			}

			if (editor && editor->text().isEmpty())
				editor->setPlainText(tr("#use fromTC and toTC to convert from and to tinkercell objects"));
		}
	}

	void CodingWindow::toggleSVNupdate(bool b)
	{
		QSettings * settings = MainWindow::getSettings();
		settings->beginGroup("Subversion");
		GlobalSettings::DO_SVN_UPDATE = b;
		settings->setValue(tr("auto-update"),b);
		settings->endGroup();
	}
	
	void CodingWindow::toolLoaded(Tool *)
	{
		static bool pyLoaded = false, rubyLoaded = false, ocLoaded = false, libCLoaded = false;
		if (!mainWindow) return;
		if (!pyLoaded && mainWindow->tool(tr("Python Interpreter")))
		{
			QWidget * widget = mainWindow->tool(tr("Python Interpreter"));
			if (widget)
			{
				PythonTool * pyTool = static_cast<PythonTool*>(widget);				
				connect(this,SIGNAL(runPython(const QString&)),pyTool,SLOT(runPythonCode(const QString&)));
				connect(this,SIGNAL(loadPyFromDir( const QString& )),pyTool,SLOT(loadFilesInDir( const QString& )));				
				pyLoaded = true;

				if (selectedLanguage == None)
					enablePython();
			}
		}

		if (!rubyLoaded && mainWindow->tool(tr("Ruby Interpreter")))
		{
			QWidget * widget = mainWindow->tool(tr("Ruby Interpreter"));
			if (widget)
			{
				RubyTool * rubyTool = static_cast<RubyTool*>(widget);				
				connect(this,SIGNAL(runRuby(const QString&)),rubyTool,SLOT(runRubyCode(const QString&)));
				connect(this,SIGNAL(loadRubyFromDir( const QString& )),rubyTool,SLOT(loadFilesInDir( const QString& )));				
				rubyLoaded = true;

				if (selectedLanguage == None)
					enableRuby();
			}
		}
		
		if (!ocLoaded && mainWindow->tool(tr("Octave Interpreter")))
		{
			QWidget * widget = mainWindow->tool(tr("Octave Interpreter"));
			if (widget)
			{
				OctaveTool * ocTool = static_cast<OctaveTool*>(widget);				
				connect(this,SIGNAL(runOctave(const QString&)),ocTool,SLOT(runOctaveCode(const QString&)));
				connect(this,SIGNAL(loadOctFromDir( const QString& )),ocTool,SLOT(loadFilesInDir( const QString& )));				
				ocLoaded = true;
				
				if (selectedLanguage == None)
					enableOctave();
			}
		}

		if (!libCLoaded && mainWindow->tool(tr("Load C Libraries")))
		{
			QWidget * widget = mainWindow->tool(tr("Load C Libraries"));
			if (widget)
			{
				LoadCLibrariesTool * loadCTool = static_cast<LoadCLibrariesTool*>(widget);
				connect(this,SIGNAL(compileBuildLoadC(const QString&,const QString&,const QString&)),
						loadCTool,SLOT(compileBuildLoadC(const QString&,const QString&,const QString&)));
				connect(this,SIGNAL(compile(const QString&, QString&)),
						loadCTool,SLOT(compile(const QString&, QString&)));
				
				libCLoaded = true;
			}
		}
	}

	bool CodingWindow::doSVNUpdate()
	{
		 QString homeDir = GlobalSettings::homeDir();

		QString s;
		int err = 0;
		if (!QFile::exists(GlobalSettings::homeDir() + QObject::tr("/.svn")) && !GlobalSettings::PLUGINS_SVN_URL.isEmpty())
		{
			s = QObject::tr("svn co ") + GlobalSettings::PLUGINS_SVN_URL + QObject::tr(" ") + homeDir;
			err = system(s.toAscii().data());
		}

	
	#ifdef Q_WS_WIN
		s = QObject::tr("cd ") + homeDir + QObject::tr("& svn update --force");
	#else
		s = QObject::tr("cd ") + homeDir + QObject::tr("; svn update --force");
	#endif
		err = system(s.toAscii().data());
	}

	bool CodingWindow::setMainWindow(MainWindow* main)
	{
		Tool::setMainWindow(main);

		QString appDir = QCoreApplication::applicationDirPath();

		QSplitter * splitter = new QSplitter(Qt::Horizontal);
        splitter->addWidget(editorWidget);
		QWidget * rightWidget = new QWidget;
		QVBoxLayout * rightLayout = new QVBoxLayout;
		rightLayout->addWidget(new QLabel(tr("double-click on a function to insert")),0);
		rightLayout->addWidget(new TCFunctionsListView(mainWindow, appDir + tr("/c"), editor),10);
		rightWidget->setLayout(rightLayout);
       	splitter->addWidget(rightWidget);
        splitter->setStretchFactor(0,2);

        window->setCentralWidget(splitter);
        window->setWindowTitle(name);

		if (mainWindow)
		{
			QDockWidget * dock = 0;
			setWindowTitle(name);
			setWindowIcon(QIcon(tr(":/images/cmd.png")));
			dock = mainWindow->addToolWindow(this, MainWindow::DockWidget, Qt::BottomDockWidgetArea, Qt::BottomDockWidgetArea);
			dock->move(mainWindow->geometry().bottomRight() - QPoint(sizeHint().width()*2,sizeHint().height()));
			dock->hide();
			dock->setFloating(true);

			QToolBar * toolBar = mainWindow->toolBarForTools;

			QAction * action = new QAction(tr("Coding Window"),toolBar);
			action->setIcon(QIcon(tr(":/images/tool.png")));

			QAction * updateAction = new QAction(tr("Update now"),toolBar);
			updateAction->setIcon(QIcon(tr(":/images/down.png")));
			updateAction->setToolTip(tr("Download plug-ins and modules to the TinkerCell home folder (usually inside the Documents folder)"));					
			connect(updateAction,SIGNAL(triggered()),this,SLOT(doSVNUpdate()));

			if (dock)
				connect(action,SIGNAL(triggered()),dock,SLOT(show()));
			else
			{
				if (mainWindow->viewMenu)
				{
					QAction * toggle = mainWindow->viewMenu->addAction(tr("Coding Window"));
					toggle->setCheckable(true);
					connect(toggle,SIGNAL(toggled(bool)),this,SLOT(setVisible(bool)));
				}
				connect(action,SIGNAL(triggered()),this,SLOT(show()));
			}
			
			if (mainWindow->settingsMenu)
			{
				QMenu * updateMenu = new QMenu(tr("&Updates..."));
				updateMenu->addAction(updateAction);
				QAction * svnupdate = updateMenu->addAction(tr("Automatic updates at start"));
				svnupdate->setToolTip(tr("Perform updates when TinkerCell starts"));					
				svnupdate->setCheckable(true);
				svnupdate->setChecked(GlobalSettings::DO_SVN_UPDATE);
				toggleSVNupdate(GlobalSettings::DO_SVN_UPDATE);
				connect(svnupdate,SIGNAL(toggled(bool)),this,SLOT(toggleSVNupdate(bool)));
				
				mainWindow->settingsMenu->addSeparator();
				mainWindow->settingsMenu->addMenu(updateMenu);
			}
			
			toolBar->addAction(action);
			toolBar->addAction(updateAction);

			if (mainWindow->helpMenu)
			{
				QList<QAction*> actions = mainWindow->helpMenu->actions();
				QAction * aboutAction = 0;
	
				for (int i=0; i < actions.size(); ++i)
					if (actions[i] && actions[i]->text() == tr("About"))
					{
						aboutAction = actions[i];
						break;	
					}
				if (aboutAction)
				{	
					mainWindow->helpMenu->removeAction(aboutAction);
					mainWindow->helpMenu->addSeparator();
					mainWindow->helpMenu->addAction(aboutAction);
				}
			}

			if (mainWindow->settingsMenu && cButton && pythonButton && octaveButton)
			{
				QMenu * langMenu = mainWindow->settingsMenu->addMenu(tr("Console language"));
				QActionGroup * actionGroup = new QActionGroup(this);
				
				cAction = langMenu->addAction(tr("C"));
				pythonAction = langMenu->addAction(tr("Python"));
				octaveAction = langMenu->addAction(tr("Octave"));
				rubyAction = langMenu->addAction(tr("Ruby"));
				
				connect(cAction,SIGNAL(toggled(bool)),this,SLOT(enableC(bool)));
				connect(pythonAction,SIGNAL(toggled(bool)),this,SLOT(enablePython(bool)));
				connect(octaveAction,SIGNAL(toggled(bool)),this,SLOT(enableOctave(bool)));
				connect(rubyAction,SIGNAL(toggled(bool)),this,SLOT(enableRuby(bool)));
                
				cAction->setCheckable(true);
				pythonAction->setCheckable(true);
				octaveAction->setCheckable(true);
				rubyAction->setCheckable(true);

				actionGroup->addAction(cAction);
				actionGroup->addAction(pythonAction);
				actionGroup->addAction(octaveAction);
				actionGroup->addAction(rubyAction);
				actionGroup->setExclusive(true);
			}
			
			usernameDialog = new QDialog(mainWindow);
			QVBoxLayout * layout = new QVBoxLayout;
			QHBoxLayout * layout1 = new QHBoxLayout;
			QHBoxLayout * layout2 = new QHBoxLayout;
			QHBoxLayout * layout3 = new QHBoxLayout;
			layout1->addWidget(new QLabel("Username : "),0);
			layout2->addWidget(new QLabel("Password : "),0);
			usernameLine = new QLineEdit("");
			passwordLine = new QLineEdit("");
			passwordLine->setEchoMode(QLineEdit::Password);

			layout1->addWidget(usernameLine,1);
			layout2->addWidget(passwordLine,1);
			
			QPushButton * okButton = new QPushButton("&OK");
			layout3->addStretch(3);
			layout3->addWidget(okButton,1);
			layout3->addStretch(3);
			
			layout->addLayout(layout1);
			layout->addLayout(layout2);
			layout->addLayout(layout3);
			connect(okButton,SIGNAL(released()),usernameDialog,SLOT(accept()));
			usernameDialog->setLayout(layout);
			
			connect(mainWindow, SIGNAL(toolLoaded(Tool*)), this, SLOT(toolLoaded(Tool*)));
			
			return true;
		}
		return false;
	}

	 void CodingWindow::about()
	 {
		 QMessageBox::about(this, tr("About Coding Window"),
					 tr("This tool allows run-time execution of C, Python, and Octave code. The code can also be added permanently to TinkerCell."));
	 }

	 void CodingWindow::setupEditor()
	 {
		QFont font;
		font.setFamily("Courier");
		font.setFixedPitch(true);

		font.setPointSize(10);

		editor = new RuntimeCodeEditor;
		editor->setFont(font);

		highlighter = new CodingWindowSyntaxHighlighter(editor->document());
		
		cAction = octaveAction = pythonAction = 0;

		cButton = new QRadioButton("C");
		if (GlobalSettings::ENABLE_OCTAVE)
	        octaveButton = new QRadioButton("Octave");
		else
	        octaveButton = 0;
	   
	    if (GlobalSettings::ENABLE_PYTHON)
            pythonButton = new QRadioButton("Python");
		else
        	pythonButton = 0;

		if (GlobalSettings::ENABLE_RUBY)
	        rubyButton = new QRadioButton("Ruby");
		else
	        rubyButton = 0;
		
		connect(cButton,SIGNAL(toggled(bool)),this,SLOT(enableC(bool)));
		connect(pythonButton,SIGNAL(toggled(bool)),this,SLOT(enablePython(bool)));
		connect(octaveButton,SIGNAL(toggled(bool)),this,SLOT(enableOctave(bool)));
		connect(rubyButton,SIGNAL(toggled(bool)),this,SLOT(enableRuby(bool)));
		 
 		QHBoxLayout * layout1 = new QHBoxLayout;
 		layout1->addWidget(cButton,0);
 		layout1->addWidget(pythonButton,0);
 		layout1->addWidget(octaveButton,0);
 		layout1->addWidget(rubyButton,0);
 		layout1->addStretch(1);
 		
 		QVBoxLayout * layout2 = new QVBoxLayout;
 		layout2->addLayout(layout1);
		layout2->addWidget(editor);
		//layout2->setContentsMargins(0,0,0,0);
		
		editorWidget = new QWidget(this);
		editorWidget->setLayout(layout2);
	 }

	 void CodingWindow::setupMenu()
	 {
		 toolBar = new QToolBar(window);
		 QAction * action;

		 action = toolBar->addAction(QIcon(":/images/new.png"),tr("New"),this,SLOT(newDoc()));
		 action->setShortcut(QKeySequence(QKeySequence::New));
		 action->setToolTip(tr("New"));

		 //action = toolBar->addAction(QIcon(":/images/open.png"),tr("Open"),this,SLOT(open()));
		 //action->setShortcut(QKeySequence(QKeySequence::Open));
		 //action->setToolTip(tr("Open"));

		 action = toolBar->addAction(QIcon(":/images/save.png"),tr("Save"),this,SLOT(convertCodeToButton()));
		 action->setShortcut(QKeySequence(QKeySequence::Save));
		 action->setToolTip(tr("Incorporate in TinkerCell"));

		 action = toolBar->addAction(QIcon(":/images/undo.png"),tr("Undo"),this,SLOT(undo()));
		 action->setToolTip(tr("Undo"));

		 action = toolBar->addAction(QIcon(":/images/redo.png"),tr("Redo"),this,SLOT(redo()));
		 action->setToolTip(tr("Redo"));

		 //action = toolBar->addAction(QIcon(":/images/cmd.png"),tr("Command"),&commandDialog,SLOT(exec()));
		 //action->setToolTip(tr("Edit command"));

		 action = toolBar->addAction(QIcon(":/images/play.png"),tr("Run"),this,SLOT(run()));
		 action->setToolTip(tr("Run code"));

		 //action = toolBar->addAction(QIcon(":/images/function.png"),tr("Buttonize"),this,SLOT(convertCodeToButton()));
		 //action->setToolTip(tr("Add code to the functions list"));

		 action = toolBar->addAction(QIcon(":/images/about.png"),tr("About"),this,SLOT(about()));
		 action->setToolTip(tr("About"));

		 //new QShortcut(tr("Ctrl+S"),this,SLOT(save()),SLOT(save()),Qt::WidgetShortcut);
		 //new QShortcut(tr("Ctrl+N"),this,SLOT(newDoc()),SLOT(newDoc()),Qt::WidgetShortcut);
		 //new QShortcut(tr("Ctrl+A"),this,SLOT(selectAll()),SLOT(selectAll()),Qt::WidgetShortcut);
		 
		 QToolButton * findButton = new QToolButton;
		 findButton->setIcon(QIcon(tr(":/images/find.png")));
		 findButton->setToolTip("Find or replace text");
		 connect(findButton, SIGNAL(pressed()), editor, SLOT(showFindReplaceDialog()));
		 toolBar->addWidget(findButton);
		 window->addToolBar(toolBar);

		 //editorC->grabShortcut(tr("Ctrl+S"));
		 //editorC->grabShortcut(tr("Ctrl+N"));
		 //editorC->grabShortcut(tr("Ctrl+A"));
	 }

	void CodingWindow::showFindReplaceDialog()
	{
		if (editor)
			editor->showFindReplaceDialog();
	}

	void CodingWindow::newDoc()
	{
		if (editor)
		{
		    editor->clear();
			editor->defaultSavedFilename.clear();

			if (selectedLanguage == C)
			{
                enableC();
			}
			else
			if (selectedLanguage == Python)
			{
                enablePython();
			}
			else
			if (selectedLanguage == Octave)
			{
                enableOctave();
			}
		}
	}

	void CodingWindow::selectAll()
	{
		if (editor)
		{
			editor->selectAll();
		}
	}

	void CodingWindow::open()
	{
		if (editor)
		{
			if (selectedLanguage == C)
				editor->open("C Files (*.c)");
			else
			if (selectedLanguage == Python)
				editor->open("Python Files (*.py)");
			else
			if (selectedLanguage == Octave)
				editor->open("Octave Files (*.m)");
		}
	}

	void CodingWindow::save()
	{
		if (editor)
		{
			if (selectedLanguage == C)
				editor->save("C Files (*.c)");
			else
			if (selectedLanguage == Python)
				editor->save("Python Files (*.py)");
			else
			if (selectedLanguage == Octave)
				editor->save("Octave Files (*.m)");
		}
	}

	void CodingWindow::undo()
	{
		if (editor)
		{
			editor->undo();
		}
	}

	void CodingWindow::redo()
	{
		if (editor)
		{
			editor->redo();
		}
	}

	 void CodingWindow::run()
	 {
		if (editor)
		{
			if (selectedLanguage == C)
				runC(editor->toPlainText());
            else
			if (selectedLanguage == Python)
				emit runPython(editor->toPlainText());
			else
			if (selectedLanguage == Ruby)
				emit runRuby(editor->toPlainText());
            else
			if (selectedLanguage == Octave)
				emit runOctave(editor->toPlainText());
		}
	 }

	 void CodingWindow::runC(const QString& code)
	 {
		if (mainWindow == 0) return;

 		QFile qfile(fileName);
		if (!qfile.open(QIODevice::WriteOnly | QIODevice::Text))
			 return;

		QTextStream out(&qfile);
        if (code.contains( QRegExp(tr("TCAPIEXPORT void\\s+run\\s*\\(\\s*\\)")) ))
		{
			out << code;
		}
		else
		{
            QMessageBox::information(mainWindow,tr("Error"),tr("code must define: TCAPIEXPORT void run()"));
			return;
		}

		qfile.close();

		emit compileBuildLoadC(tr("code.c -lode -lssa"),tr("run"),tr("C code"));
	 }

	 QSize CodingWindow::sizeHint() const
	 {
		 return QSize(500,300);
	 }


	 /********************************
	      TEXT EDITOR
	 *********************************/

	 void RuntimeCodeEditor::open(const QString& ext)
	 {
		 QString fileName;

		 if (fileName.isNull())
			 fileName = QFileDialog::getOpenFileName(this,
				 tr("Open File"), MainWindow::previousFileName, ext);

		 if (!fileName.isEmpty()) {
			 QFile file(fileName);
			 if (file.open(QFile::ReadOnly | QFile::Text))
				 setPlainText(file.readAll());

		 }
	 }

	 void RuntimeCodeEditor::save(const QString& ext)
	 {
		 QString fileName;

		 if (defaultSavedFilename.contains(ext))
			fileName = defaultSavedFilename[ext];

		 if (fileName.isNull() || fileName.isEmpty())
		 {
			 fileName = QFileDialog::getSaveFileName(this, tr("Save File"),MainWindow::previousFileName, ext);
		 }

		 if (!fileName.isNull() && !fileName.isEmpty())
		 {
			 MainWindow::previousFileName = fileName.remove(QRegExp(tr("\\.*")));
			 QFile file(fileName);
			 if (file.open(QFile::WriteOnly | QFile::Text))
			 {
				 file.write(toPlainText().toAscii());
				 defaultSavedFilename[ext] = fileName;
			 }
		 }
	 }

	 void RuntimeCodeEditor::saveAs(const QString& ext)
	 {
		 QString fileName;

		 if (fileName.isNull())
			 fileName = QFileDialog::getSaveFileName(this,
				 tr("Save File"), MainWindow::previousFileName, ext);

		 if (!fileName.isNull() && !fileName.isEmpty())
		 {
			 MainWindow::previousFileName = fileName.remove(QRegExp(tr("\\.*")));
			 QFile file(fileName);
			 if (file.open(QFile::WriteOnly | QFile::Text))
			 {
				 file.write(toPlainText().toAscii());
			 }
		 }
	 }
/*
	 void RuntimeCodeEditor::keyPressEvent ( QKeyEvent * keyEvent )
	 {
		 if (keyEvent == 0) return;
		 if (completer.widget() != this) completer.setWidget(this);
		 int key = keyEvent->key();
		 if (keyEvent->modifiers() == Qt::ControlModifier)
		 {
			 if (key == Qt::Key_Equal)
			 {
				 zoomIn();
			 }
			 else
			 if (key == Qt::Key_Minus)
			 {
				 zoomOut();
			 }
			 else
			 if (key == Qt::Key_A)
			 {
				 selectAll();
			 }
			 else
			 {
				 CodeEditor::keyPressEvent(keyEvent);
			 }
			 return;
		 }

		 if (completer.popup()->isVisible())
		 {
			 // The following keys are forwarded by the completer to the widget
			switch (keyEvent->key())
			{
				case Qt::Key_Enter:
				case Qt::Key_Return:
				case Qt::Key_Escape:
				case Qt::Key_Tab:
					keyEvent->ignore();
					 return;
				case Qt::Key_Backtab:
 					 CodeEditor::keyPressEvent(keyEvent);
					 return; // let the completer do default behavior
				default:
					break;
			}
		}

		 if (keyEvent->text().isEmpty())
		 {
			 CodeEditor::keyPressEvent(keyEvent);
			 return;
		 }
		QTextCursor tc = textCursor();
		tc.movePosition(QTextCursor::Left);
		tc.select(QTextCursor::WordUnderCursor);
		QString completionPrefix = tc.selectedText().trimmed();
		tc.movePosition(QTextCursor::Right);

		if (completionPrefix.length() < 1)
		{
			completer.popup()->hide();
			CodeEditor::keyPressEvent(keyEvent);
			return;
		}

		//auto complete
		if (completionPrefix != completer.completionPrefix())
		{
			completer.setCompletionPrefix(completionPrefix);
			completer.popup()->setCurrentIndex(completer.completionModel()->index(0, 0));
		}
		QRect cr = cursorRect();
		cr.setWidth(completer.popup()->sizeHintForColumn(0)
                    + completer.popup()->verticalScrollBar()->sizeHint().width());

		CodeEditor::keyPressEvent(keyEvent);

		completer.complete(cr); // show functions
	 }
*/
	 void RuntimeCodeEditor::insertCompletion(const QString& completion)
	 {
		 if (completer.widget() != this)
			 return;
		 QTextCursor tc = textCursor();
		 int extra = completion.length() - completer.completionPrefix().length();
		 tc.movePosition(QTextCursor::Left);
		 tc.movePosition(QTextCursor::EndOfWord);
		 tc.insertText(completion.right(extra));
		 setTextCursor(tc);
	 }

	 /********************************
	      FUNCTIONS LIST
	 *********************************/

	 TCFunctionsListView::TCFunctionsListView(MainWindow* mainWindow, const QString& cDir, CodeEditor * textEdit)
	 {
		 console = mainWindow->console();
		 if (!cDir.isEmpty()) readCHeaders(cDir);
		 sortItems(0,Qt::AscendingOrder);
		 setSelectionMode(QAbstractItemView::SingleSelection);
		 setEditTriggers(QAbstractItemView::NoEditTriggers);
		 setAlternatingRowColors ( true );
		 setHeaderHidden ( true );
		 if (textEdit)
			 connect(this,SIGNAL(insertText(const QString&)),textEdit,SLOT(insertPlainText(const QString&)));
	 }

	 void TCFunctionsListView::readCHeaders(const QString& dirname)
	 {
		 QDir dir(dirname);
		 dir.setFilter(QDir::Files);
		 dir.setSorting(QDir::Name);

		 QFileInfoList list = dir.entryInfoList();
		 //QApplication::setOverrideCursor(QCursor(Qt::WaitCursor));

		 QHash<QString,QTreeWidgetItem*> tree;
		 
		 QStringList visitedFunctions;

		 for (int i = 0; i < list.size(); ++i)
		 {
			QFileInfo fileInfo = list.at(i);
			QFile file(fileInfo.absoluteFilePath());
			if (!fileInfo.baseName().startsWith(tr("TC_")) || fileInfo.completeSuffix().toLower() != tr("h") || !file.open(QFile::ReadOnly)) continue;
			
			QRegExp regexComments(tr("brief\\s*([^\\n\\r]+)"));
			QRegExp regexGroup(tr("ingroup\\s*([^\\n\\r]+)"));
			QRegExp regexFunction(tr("\\s*(\\S+)\\s*(tc_[A-Za-z0-9]+)\\s*(\\([^\\)]*\\))"));
			QRegExp charstar(tr("char\\s*\\*"));
			QRegExp voidstar(tr("void\\s*\\*"));
			QTreeWidgetItem * currentItem = 0;
			QString currentComment;

			 while (!file.atEnd())
			 {
				 QString line(file.readLine());
				 line.replace(charstar,tr("string"));
				 line.replace(voidstar,tr("item"));
				 
				 regexGroup.indexIn(line);
				 regexComments.indexIn(line);
				 regexFunction.indexIn(line);
				 if (regexGroup.numCaptures() > 0 && regexGroup.capturedTexts().at(1).length() > 1)
				 {
					QString s = regexGroup.capturedTexts().at(1); //category
					if (s.contains(QRegExp("\\s*init\\s*")))
					{
						currentItem = 0;
						continue;
					}
					if (tree.contains(s))
					{
						currentItem = tree[s];
					}
					else
					{
						currentItem = new QTreeWidgetItem(QStringList() << s);
						tree[s] = currentItem;
						addTopLevelItem(currentItem);
					}
				 }

				 if (regexComments.numCaptures() > 0 && regexComments.capturedTexts().at(1).length() > 1)
				 {
					QString s = regexComments.capturedTexts().at(1); //comment
					currentComment = s;
				 }

				 if (currentItem && regexFunction.numCaptures() > 0 && regexFunction.capturedTexts().at(1).length() > 0)
				 {
					QString name, args, ret, str;
					name = regexFunction.capturedTexts().at(2);
					if (visitedFunctions.contains(name)) continue;
					visitedFunctions << name.trimmed();
					
					ret = regexFunction.capturedTexts().at(1);
					args = regexFunction.capturedTexts().at(3);
					args.replace(tr("const char*"),tr("string"));
					args.replace(tr("const char *"),tr("string"));
					args.replace(tr("long"),tr("item"));
					
					if (ret == tr("void"))
						str = name + args;
					else
						str = ret + tr(" var = ") + name + args;

					QTreeWidgetItem * childItem = new QTreeWidgetItem(QStringList() << name << str);
					currentItem->addChild(childItem);
					childItem->setToolTip(0,currentComment);
					childItem->setWhatsThis(0,currentComment);
				 }
			 }
			file.close();
		 }
		 
		 if (console && console->editor() && !console->editor()->completer())
		 {
		 	//visitedFunctions << "clear";
			QCompleter * completer = new QCompleter(visitedFunctions,this);			
			//completer->setModel(new QStringListModel(visitedFunctions, completer));
			//completer->setModelSorting(QCompleter::CaseInsensitivelySortedModel);
			//completer->setWrapAround(false);
			completer->setCaseSensitivity(Qt::CaseSensitive);
			
			console->editor()->setCompleter(completer);
		 }
	 }

	 void TCFunctionsListView::mouseDoubleClickEvent ( QMouseEvent *  )
	 {
		 QTreeWidgetItem * item = this->currentItem();
		 if (item && indexOfTopLevelItem(item) == -1)
		 {
			QString s = item->text(1);
			if (!TCFunctionsListView::prefix.isEmpty())
				s.replace(QString("tc_"), TCFunctionsListView::prefix + QString("tc_"));
			emit insertText(s);
		 }
	 }

	 void TCFunctionsListView::keyPressEvent ( QKeyEvent * event )
	 {
		 if (event &&
			 (event->key() == Qt::Key_Enter ||
			 event->key() == Qt::Key_Return ||
			  event->key() == Qt::Key_Space ||
			  event->key() == Qt::Key_Tab))
		 {
			QTreeWidgetItem * item = this->currentItem();
			 if (item && indexOfTopLevelItem(item) == -1)
			 {
				QString s = item->text(1);
				if (!TCFunctionsListView::prefix.isEmpty())
					s.replace(QString("tc_"), TCFunctionsListView::prefix + QString("tc_"));
				emit insertText(s);
			 }
		 }
	 }

	 void CodingWindow::setVisible ( bool visible )
	 {
		activateWindow();
		if (isMinimized())
			showNormal();
		Tool::setVisible(visible);
	 }

	void CodingWindow::setCode(const QString& code)
	{
		if (editor)
			editor->setPlainText(code);
	}

	QString TCFunctionsListView::prefix = QString();
}

>>>>>>> 1905cfc9e294ef1fd9bc7c874b4a4e2af0fff3ea
